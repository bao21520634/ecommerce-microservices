enum UserRoles {
  ADMIN
  USER
}

enum AuthServiceTypes {
  PASSWORD
  GOOGLE
}

type LocalAuthStruct {
  hashed String
}

type SocialAuthStruct {
  userId      String
  email       String
  accessToken String?
}

type AuthServices {
  password LocalAuthStruct?
  google   SocialAuthStruct?
}

type Settings {
  stripeId String?
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username     String
  primaryEmail String    @unique
  fullName     String
  phone        String?
  address      Address?  @relation(fields: [addressId], references: [id])
  addressId    String?   @db.ObjectId
  sex          String?
  dob          String?
  bio          String?
  role         UserRoles @default(USER)

  emails   Email[]
  sessions Session[]

  services AuthServices // Changed from Json? to AuthServices type
  settings Settings? // Changed from Json? to Settings type
}

model Email {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  address          String   @unique
  verified         Boolean  @default(false)
  primary          Boolean  @default(false)
  verificationCode String?
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.ObjectId
  createdAt        DateTime @default(now())
}

model Session {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt Int // Changed to Int to match proto definition
  expiresAt Int // Changed to Int to match proto definition
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
}

model Address {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  address1 String
  address2 String?
  country  String
  state    String
  city     String
  zip      String

  users User[]
}
