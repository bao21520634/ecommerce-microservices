// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: elastic.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "elastic";

export interface SearchMetadata {
  totalResults: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

export interface SearchParams {
  queryString: string;
  page: number;
  pageSize: number;
  /** Format: "field:value" */
  filters: string[];
  /** Format: "field:asc" or "field:desc" */
  sortBy: string[];
}

export interface SearchHit {
  id: string;
  score: number;
  indexName: string;
  /** JSON blob of the hit */
  document: Uint8Array;
  highlights: { [key: string]: string };
}

export interface SearchHit_HighlightsEntry {
  key: string;
  value: string;
}

export interface SearchResponse {
  metadata?: SearchMetadata | undefined;
  hits: SearchHit[];
  /** JSON blobs of aggregations */
  aggregations: { [key: string]: Uint8Array };
}

export interface SearchResponse_AggregationsEntry {
  key: string;
  value: Uint8Array;
}

export interface SuggestionRequest {
  prefix: string;
  indexName: string;
  fieldName: string;
  size: number;
}

export interface SuggestionResponse {
  suggestions: string[];
}

export const ELASTIC_PACKAGE_NAME = "elastic";

function createBaseSearchMetadata(): SearchMetadata {
  return { totalResults: 0, page: 0, pageSize: 0, totalPages: 0 };
}

export const SearchMetadata: MessageFns<SearchMetadata> = {
  encode(message: SearchMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalResults !== 0) {
      writer.uint32(8).int32(message.totalResults);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalResults = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchMetadata {
    return {
      totalResults: isSet(object.totalResults) ? globalThis.Number(object.totalResults) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: SearchMetadata): unknown {
    const obj: any = {};
    if (message.totalResults !== 0) {
      obj.totalResults = Math.round(message.totalResults);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },
};

function createBaseSearchParams(): SearchParams {
  return { queryString: "", page: 0, pageSize: 0, filters: [], sortBy: [] };
}

export const SearchParams: MessageFns<SearchParams> = {
  encode(message: SearchParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queryString !== "") {
      writer.uint32(10).string(message.queryString);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    for (const v of message.filters) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.sortBy) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queryString = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sortBy.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchParams {
    return {
      queryString: isSet(object.queryString) ? globalThis.String(object.queryString) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => globalThis.String(e)) : [],
      sortBy: globalThis.Array.isArray(object?.sortBy) ? object.sortBy.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SearchParams): unknown {
    const obj: any = {};
    if (message.queryString !== "") {
      obj.queryString = message.queryString;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filters?.length) {
      obj.filters = message.filters;
    }
    if (message.sortBy?.length) {
      obj.sortBy = message.sortBy;
    }
    return obj;
  },
};

function createBaseSearchHit(): SearchHit {
  return { id: "", score: 0, indexName: "", document: new Uint8Array(0), highlights: {} };
}

export const SearchHit: MessageFns<SearchHit> = {
  encode(message: SearchHit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.score !== 0) {
      writer.uint32(21).float(message.score);
    }
    if (message.indexName !== "") {
      writer.uint32(26).string(message.indexName);
    }
    if (message.document.length !== 0) {
      writer.uint32(34).bytes(message.document);
    }
    Object.entries(message.highlights).forEach(([key, value]) => {
      SearchHit_HighlightsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchHit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchHit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.score = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.indexName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.document = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = SearchHit_HighlightsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.highlights[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchHit {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
      document: isSet(object.document) ? bytesFromBase64(object.document) : new Uint8Array(0),
      highlights: isObject(object.highlights)
        ? Object.entries(object.highlights).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SearchHit): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    if (message.indexName !== "") {
      obj.indexName = message.indexName;
    }
    if (message.document.length !== 0) {
      obj.document = base64FromBytes(message.document);
    }
    if (message.highlights) {
      const entries = Object.entries(message.highlights);
      if (entries.length > 0) {
        obj.highlights = {};
        entries.forEach(([k, v]) => {
          obj.highlights[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseSearchHit_HighlightsEntry(): SearchHit_HighlightsEntry {
  return { key: "", value: "" };
}

export const SearchHit_HighlightsEntry: MessageFns<SearchHit_HighlightsEntry> = {
  encode(message: SearchHit_HighlightsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchHit_HighlightsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchHit_HighlightsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchHit_HighlightsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SearchHit_HighlightsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseSearchResponse(): SearchResponse {
  return { hits: [], aggregations: {} };
}

export const SearchResponse: MessageFns<SearchResponse> = {
  encode(message: SearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      SearchMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    for (const v of message.hits) {
      SearchHit.encode(v!, writer.uint32(18).fork()).join();
    }
    Object.entries(message.aggregations).forEach(([key, value]) => {
      SearchResponse_AggregationsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = SearchMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hits.push(SearchHit.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = SearchResponse_AggregationsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.aggregations[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResponse {
    return {
      metadata: isSet(object.metadata) ? SearchMetadata.fromJSON(object.metadata) : undefined,
      hits: globalThis.Array.isArray(object?.hits) ? object.hits.map((e: any) => SearchHit.fromJSON(e)) : [],
      aggregations: isObject(object.aggregations)
        ? Object.entries(object.aggregations).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SearchResponse): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = SearchMetadata.toJSON(message.metadata);
    }
    if (message.hits?.length) {
      obj.hits = message.hits.map((e) => SearchHit.toJSON(e));
    }
    if (message.aggregations) {
      const entries = Object.entries(message.aggregations);
      if (entries.length > 0) {
        obj.aggregations = {};
        entries.forEach(([k, v]) => {
          obj.aggregations[k] = base64FromBytes(v);
        });
      }
    }
    return obj;
  },
};

function createBaseSearchResponse_AggregationsEntry(): SearchResponse_AggregationsEntry {
  return { key: "", value: new Uint8Array(0) };
}

export const SearchResponse_AggregationsEntry: MessageFns<SearchResponse_AggregationsEntry> = {
  encode(message: SearchResponse_AggregationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResponse_AggregationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResponse_AggregationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResponse_AggregationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: SearchResponse_AggregationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },
};

function createBaseSuggestionRequest(): SuggestionRequest {
  return { prefix: "", indexName: "", fieldName: "", size: 0 };
}

export const SuggestionRequest: MessageFns<SuggestionRequest> = {
  encode(message: SuggestionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prefix !== "") {
      writer.uint32(10).string(message.prefix);
    }
    if (message.indexName !== "") {
      writer.uint32(18).string(message.indexName);
    }
    if (message.fieldName !== "") {
      writer.uint32(26).string(message.fieldName);
    }
    if (message.size !== 0) {
      writer.uint32(32).int32(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.indexName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fieldName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestionRequest {
    return {
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
      fieldName: isSet(object.fieldName) ? globalThis.String(object.fieldName) : "",
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
    };
  },

  toJSON(message: SuggestionRequest): unknown {
    const obj: any = {};
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.indexName !== "") {
      obj.indexName = message.indexName;
    }
    if (message.fieldName !== "") {
      obj.fieldName = message.fieldName;
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    return obj;
  },
};

function createBaseSuggestionResponse(): SuggestionResponse {
  return { suggestions: [] };
}

export const SuggestionResponse: MessageFns<SuggestionResponse> = {
  encode(message: SuggestionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestionResponse {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SuggestionResponse): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions;
    }
    return obj;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
