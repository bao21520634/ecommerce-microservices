// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: cart.service.proto

/* eslint-disable */
import { Count, DeleteManyResponse, Id, Query } from "./common";
import {
  CreateManyOrdersInput,
  CreateOrderInput,
  DeleteManyOrdersInput,
  NullableOrder,
  Order,
  Orders,
  UpdateManyOrdersInput,
  UpdateOrderInput,
} from "./order";
import {
  CreateManyOrderItemsInput,
  CreateOrderItemInput,
  DeleteManyOrderItemsInput,
  NullableOrderItem,
  OrderItem,
  OrderItems,
  UpdateManyOrderItemsInput,
  UpdateOrderItemInput,
} from "./orderItem";

export const protobufPackage = "cart";

export interface CartService<Context extends DataLoaders> {
  /** Order */
  order(ctx: Context, request: Id): Promise<NullableOrder>;
  orders(ctx: Context, request: Query): Promise<Orders>;
  ordersTotal(ctx: Context, request: Query): Promise<Count>;
  createOrder(ctx: Context, request: CreateOrderInput): Promise<Order>;
  createManyOrders(ctx: Context, request: CreateManyOrdersInput): Promise<Orders>;
  updateOrder(ctx: Context, request: UpdateOrderInput): Promise<Order>;
  updateManyOrders(ctx: Context, request: UpdateManyOrdersInput): Promise<Orders>;
  deleteOrder(ctx: Context, request: Id): Promise<Order>;
  deleteManyOrders(ctx: Context, request: DeleteManyOrdersInput): Promise<DeleteManyResponse>;
  /** OrderItem */
  orderItem(ctx: Context, request: Id): Promise<NullableOrderItem>;
  orderItems(ctx: Context, request: Query): Promise<OrderItems>;
  orderItemsTotal(ctx: Context, request: Query): Promise<Count>;
  createOrderItem(ctx: Context, request: CreateOrderItemInput): Promise<OrderItem>;
  createManyOrderItems(ctx: Context, request: CreateManyOrderItemsInput): Promise<OrderItems>;
  updateOrderItem(ctx: Context, request: UpdateOrderItemInput): Promise<OrderItem>;
  updateManyOrderItems(ctx: Context, request: UpdateManyOrderItemsInput): Promise<OrderItems>;
  deleteOrderItem(ctx: Context, request: Id): Promise<OrderItem>;
  deleteManyOrderItems(ctx: Context, request: DeleteManyOrderItemsInput): Promise<DeleteManyResponse>;
}

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}
