// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: charge.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "charge";

export enum PaymentMethod {
  CreditCard = 0,
  DebitCard = 1,
  PayPal = 2,
  UNRECOGNIZED = -1,
}

export function paymentMethodFromJSON(object: any): PaymentMethod {
  switch (object) {
    case 0:
    case "CreditCard":
      return PaymentMethod.CreditCard;
    case 1:
    case "DebitCard":
      return PaymentMethod.DebitCard;
    case 2:
    case "PayPal":
      return PaymentMethod.PayPal;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentMethod.UNRECOGNIZED;
  }
}

export function paymentMethodToJSON(object: PaymentMethod): string {
  switch (object) {
    case PaymentMethod.CreditCard:
      return "CreditCard";
    case PaymentMethod.DebitCard:
      return "DebitCard";
    case PaymentMethod.PayPal:
      return "PayPal";
    case PaymentMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ChargeStatus {
  Pending = 0,
  Succeeded = 1,
  Failed = 2,
  Refunded = 3,
  UNRECOGNIZED = -1,
}

export function chargeStatusFromJSON(object: any): ChargeStatus {
  switch (object) {
    case 0:
    case "Pending":
      return ChargeStatus.Pending;
    case 1:
    case "Succeeded":
      return ChargeStatus.Succeeded;
    case 2:
    case "Failed":
      return ChargeStatus.Failed;
    case 3:
    case "Refunded":
      return ChargeStatus.Refunded;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChargeStatus.UNRECOGNIZED;
  }
}

export function chargeStatusToJSON(object: ChargeStatus): string {
  switch (object) {
    case ChargeStatus.Pending:
      return "Pending";
    case ChargeStatus.Succeeded:
      return "Succeeded";
    case ChargeStatus.Failed:
      return "Failed";
    case ChargeStatus.Refunded:
      return "Refunded";
    case ChargeStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreditCardInfo {
  cardNumber: string;
  cardHolderName: string;
  expirationMonth: string;
  expirationYear: string;
  cvv: string;
}

export interface ChargeRequest {
  amount: number;
  currency: string;
  paymentMethod: PaymentMethod;
  creditCard: CreditCardInfo | undefined;
  customerId: string;
  orderId: string;
}

export interface ChargeResponse {
  chargeId: string;
  status: ChargeStatus;
  amount: number;
  currency: string;
  description: string;
  errorMessage: string;
}

function createBaseCreditCardInfo(): CreditCardInfo {
  return { cardNumber: "", cardHolderName: "", expirationMonth: "", expirationYear: "", cvv: "" };
}

export const CreditCardInfo: MessageFns<CreditCardInfo> = {
  encode(message: CreditCardInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cardNumber !== "") {
      writer.uint32(10).string(message.cardNumber);
    }
    if (message.cardHolderName !== "") {
      writer.uint32(18).string(message.cardHolderName);
    }
    if (message.expirationMonth !== "") {
      writer.uint32(26).string(message.expirationMonth);
    }
    if (message.expirationYear !== "") {
      writer.uint32(34).string(message.expirationYear);
    }
    if (message.cvv !== "") {
      writer.uint32(42).string(message.cvv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreditCardInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreditCardInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cardNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cardHolderName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expirationMonth = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expirationYear = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cvv = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreditCardInfo {
    return {
      cardNumber: isSet(object.cardNumber) ? globalThis.String(object.cardNumber) : "",
      cardHolderName: isSet(object.cardHolderName) ? globalThis.String(object.cardHolderName) : "",
      expirationMonth: isSet(object.expirationMonth) ? globalThis.String(object.expirationMonth) : "",
      expirationYear: isSet(object.expirationYear) ? globalThis.String(object.expirationYear) : "",
      cvv: isSet(object.cvv) ? globalThis.String(object.cvv) : "",
    };
  },

  toJSON(message: CreditCardInfo): unknown {
    const obj: any = {};
    if (message.cardNumber !== "") {
      obj.cardNumber = message.cardNumber;
    }
    if (message.cardHolderName !== "") {
      obj.cardHolderName = message.cardHolderName;
    }
    if (message.expirationMonth !== "") {
      obj.expirationMonth = message.expirationMonth;
    }
    if (message.expirationYear !== "") {
      obj.expirationYear = message.expirationYear;
    }
    if (message.cvv !== "") {
      obj.cvv = message.cvv;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreditCardInfo>, I>>(base?: I): CreditCardInfo {
    return CreditCardInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreditCardInfo>, I>>(object: I): CreditCardInfo {
    const message = createBaseCreditCardInfo();
    message.cardNumber = object.cardNumber ?? "";
    message.cardHolderName = object.cardHolderName ?? "";
    message.expirationMonth = object.expirationMonth ?? "";
    message.expirationYear = object.expirationYear ?? "";
    message.cvv = object.cvv ?? "";
    return message;
  },
};

function createBaseChargeRequest(): ChargeRequest {
  return { amount: 0, currency: "", paymentMethod: 0, creditCard: undefined, customerId: "", orderId: "" };
}

export const ChargeRequest: MessageFns<ChargeRequest> = {
  encode(message: ChargeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(13).float(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    if (message.paymentMethod !== 0) {
      writer.uint32(24).int32(message.paymentMethod);
    }
    if (message.creditCard !== undefined) {
      CreditCardInfo.encode(message.creditCard, writer.uint32(34).fork()).join();
    }
    if (message.customerId !== "") {
      writer.uint32(42).string(message.customerId);
    }
    if (message.orderId !== "") {
      writer.uint32(50).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.amount = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.paymentMethod = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.creditCard = CreditCardInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargeRequest {
    return {
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      paymentMethod: isSet(object.paymentMethod) ? paymentMethodFromJSON(object.paymentMethod) : 0,
      creditCard: isSet(object.creditCard) ? CreditCardInfo.fromJSON(object.creditCard) : undefined,
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
    };
  },

  toJSON(message: ChargeRequest): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.paymentMethod !== 0) {
      obj.paymentMethod = paymentMethodToJSON(message.paymentMethod);
    }
    if (message.creditCard !== undefined) {
      obj.creditCard = CreditCardInfo.toJSON(message.creditCard);
    }
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargeRequest>, I>>(base?: I): ChargeRequest {
    return ChargeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargeRequest>, I>>(object: I): ChargeRequest {
    const message = createBaseChargeRequest();
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.paymentMethod = object.paymentMethod ?? 0;
    message.creditCard = (object.creditCard !== undefined && object.creditCard !== null)
      ? CreditCardInfo.fromPartial(object.creditCard)
      : undefined;
    message.customerId = object.customerId ?? "";
    message.orderId = object.orderId ?? "";
    return message;
  },
};

function createBaseChargeResponse(): ChargeResponse {
  return { chargeId: "", status: 0, amount: 0, currency: "", description: "", errorMessage: "" };
}

export const ChargeResponse: MessageFns<ChargeResponse> = {
  encode(message: ChargeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chargeId !== "") {
      writer.uint32(10).string(message.chargeId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.amount !== 0) {
      writer.uint32(29).float(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.errorMessage !== "") {
      writer.uint32(50).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chargeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.amount = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargeResponse {
    return {
      chargeId: isSet(object.chargeId) ? globalThis.String(object.chargeId) : "",
      status: isSet(object.status) ? chargeStatusFromJSON(object.status) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: ChargeResponse): unknown {
    const obj: any = {};
    if (message.chargeId !== "") {
      obj.chargeId = message.chargeId;
    }
    if (message.status !== 0) {
      obj.status = chargeStatusToJSON(message.status);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargeResponse>, I>>(base?: I): ChargeResponse {
    return ChargeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargeResponse>, I>>(object: I): ChargeResponse {
    const message = createBaseChargeResponse();
    message.chargeId = object.chargeId ?? "";
    message.status = object.status ?? 0;
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.description = object.description ?? "";
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
