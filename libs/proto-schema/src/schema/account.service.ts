// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: account.service.proto

/* eslint-disable */
import {
  ForgotPasswordRequest,
  ForgotPasswordResponse,
  LoginRequest,
  LoginResponse,
  LogoutRequest,
  LogoutResponse,
  ReadSessionRequest,
  ReadSessionResponse,
  ResendVerificationCodeRequest,
  ResendVerificationCodeResponse,
  UpdatePasswordRequest,
  UpdatePasswordResponse,
  VerifyAccountRequest,
  VerifyAccountResponse,
  VerifyActivationLinkRequest,
  VerifyActivationLinkResponse,
} from "./auth";
import {
  CreateRequest,
  CreateResponse,
  DeleteRequest,
  DeleteResponse,
  ReadRequest,
  ReadResponse,
  SearchRequest,
  SearchResponse,
  UpdateRequest,
  UpdateResponse,
} from "./user";

export const protobufPackage = "account";

export interface AccountService<Context extends DataLoaders> {
  /** User Management RPCs */
  CreateUser(ctx: Context, request: CreateRequest): Promise<CreateResponse>;
  ReadUser(ctx: Context, request: ReadRequest): Promise<ReadResponse>;
  UpdateUser(ctx: Context, request: UpdateRequest): Promise<UpdateResponse>;
  DeleteUser(ctx: Context, request: DeleteRequest): Promise<DeleteResponse>;
  SearchUser(ctx: Context, request: SearchRequest): Promise<SearchResponse>;
  /** Authentication RPCs */
  Login(ctx: Context, request: LoginRequest): Promise<LoginResponse>;
  Logout(ctx: Context, request: LogoutRequest): Promise<LogoutResponse>;
  ReadSession(ctx: Context, request: ReadSessionRequest): Promise<ReadSessionResponse>;
  /** Account Verification RPCs */
  VerifyAccount(ctx: Context, request: VerifyAccountRequest): Promise<VerifyAccountResponse>;
  ResendVerificationCode(ctx: Context, request: ResendVerificationCodeRequest): Promise<ResendVerificationCodeResponse>;
  VerifyActivationLink(ctx: Context, request: VerifyActivationLinkRequest): Promise<VerifyActivationLinkResponse>;
  /** Password Management RPCs */
  ForgotPassword(ctx: Context, request: ForgotPasswordRequest): Promise<ForgotPasswordResponse>;
  UpdatePassword(ctx: Context, request: UpdatePasswordRequest): Promise<UpdatePasswordResponse>;
}

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}
