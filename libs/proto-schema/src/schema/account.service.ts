// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: account.service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import {
  ForgotPasswordRequest,
  ForgotPasswordResponse,
  LoginRequest,
  LoginResponse,
  LogoutRequest,
  LogoutResponse,
  ReadSessionRequest,
  ReadSessionResponse,
  ResendVerificationCodeRequest,
  ResendVerificationCodeResponse,
  UpdatePasswordRequest,
  UpdatePasswordResponse,
  VerifyAccountRequest,
  VerifyAccountResponse,
  VerifyActivationLinkRequest,
  VerifyActivationLinkResponse,
} from "./auth";
import {
  CreateRequest,
  CreateResponse,
  DeleteRequest,
  DeleteResponse,
  ReadRequest,
  ReadResponse,
  SearchRequest,
  SearchResponse,
  UpdateRequest,
  UpdateResponse,
} from "./user";

export const protobufPackage = "account";

export const ACCOUNT_PACKAGE_NAME = "account";

export interface AccountServiceClient {
  /** User Management RPCs */

  createUser(request: CreateRequest, metadata?: Metadata): Observable<CreateResponse>;

  readUser(request: ReadRequest, metadata?: Metadata): Observable<ReadResponse>;

  updateUser(request: UpdateRequest, metadata?: Metadata): Observable<UpdateResponse>;

  deleteUser(request: DeleteRequest, metadata?: Metadata): Observable<DeleteResponse>;

  searchUser(request: SearchRequest, metadata?: Metadata): Observable<SearchResponse>;

  /** Authentication RPCs */

  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  logout(request: LogoutRequest, metadata?: Metadata): Observable<LogoutResponse>;

  readSession(request: ReadSessionRequest, metadata?: Metadata): Observable<ReadSessionResponse>;

  /** Account Verification RPCs */

  verifyAccount(request: VerifyAccountRequest, metadata?: Metadata): Observable<VerifyAccountResponse>;

  resendVerificationCode(
    request: ResendVerificationCodeRequest,
    metadata?: Metadata,
  ): Observable<ResendVerificationCodeResponse>;

  verifyActivationLink(
    request: VerifyActivationLinkRequest,
    metadata?: Metadata,
  ): Observable<VerifyActivationLinkResponse>;

  /** Password Management RPCs */

  forgotPassword(request: ForgotPasswordRequest, metadata?: Metadata): Observable<ForgotPasswordResponse>;

  updatePassword(request: UpdatePasswordRequest, metadata?: Metadata): Observable<UpdatePasswordResponse>;
}

export interface AccountServiceController {
  /** User Management RPCs */

  createUser(
    request: CreateRequest,
    metadata?: Metadata,
  ): Promise<CreateResponse> | Observable<CreateResponse> | CreateResponse;

  readUser(request: ReadRequest, metadata?: Metadata): Promise<ReadResponse> | Observable<ReadResponse> | ReadResponse;

  updateUser(
    request: UpdateRequest,
    metadata?: Metadata,
  ): Promise<UpdateResponse> | Observable<UpdateResponse> | UpdateResponse;

  deleteUser(
    request: DeleteRequest,
    metadata?: Metadata,
  ): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  searchUser(
    request: SearchRequest,
    metadata?: Metadata,
  ): Promise<SearchResponse> | Observable<SearchResponse> | SearchResponse;

  /** Authentication RPCs */

  login(request: LoginRequest, metadata?: Metadata): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  logout(
    request: LogoutRequest,
    metadata?: Metadata,
  ): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  readSession(
    request: ReadSessionRequest,
    metadata?: Metadata,
  ): Promise<ReadSessionResponse> | Observable<ReadSessionResponse> | ReadSessionResponse;

  /** Account Verification RPCs */

  verifyAccount(
    request: VerifyAccountRequest,
    metadata?: Metadata,
  ): Promise<VerifyAccountResponse> | Observable<VerifyAccountResponse> | VerifyAccountResponse;

  resendVerificationCode(
    request: ResendVerificationCodeRequest,
    metadata?: Metadata,
  ):
    | Promise<ResendVerificationCodeResponse>
    | Observable<ResendVerificationCodeResponse>
    | ResendVerificationCodeResponse;

  verifyActivationLink(
    request: VerifyActivationLinkRequest,
    metadata?: Metadata,
  ): Promise<VerifyActivationLinkResponse> | Observable<VerifyActivationLinkResponse> | VerifyActivationLinkResponse;

  /** Password Management RPCs */

  forgotPassword(
    request: ForgotPasswordRequest,
    metadata?: Metadata,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

  updatePassword(
    request: UpdatePasswordRequest,
    metadata?: Metadata,
  ): Promise<UpdatePasswordResponse> | Observable<UpdatePasswordResponse> | UpdatePasswordResponse;
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "readUser",
      "updateUser",
      "deleteUser",
      "searchUser",
      "login",
      "logout",
      "readSession",
      "verifyAccount",
      "resendVerificationCode",
      "verifyActivationLink",
      "forgotPassword",
      "updatePassword",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AccountService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AccountService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACCOUNT_SERVICE_NAME = "AccountService";
