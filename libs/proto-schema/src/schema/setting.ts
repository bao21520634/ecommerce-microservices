// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: setting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "setting";

export interface Setting {
  id: string;
  common?: CommonSettings | undefined;
  site?: SiteSettings | undefined;
  carousels: Carousel[];
  availableLanguages: Language[];
  defaultLanguage: string;
  availableCurrencies: Currency[];
  defaultCurrency: string;
  availablePaymentMethods: PaymentMethod[];
  defaultPaymentMethod: string;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface SettingInput {
  common?: CommonSettings | undefined;
  site?: SiteSettings | undefined;
  carousels: Carousel[];
  availableLanguages: Language[];
  defaultLanguage?: string | undefined;
  availableCurrencies: Currency[];
  defaultCurrency?: string | undefined;
  availablePaymentMethods: PaymentMethod[];
  defaultPaymentMethod?: string | undefined;
}

export interface UpdateSettingInput {
  id: string;
  data?: SettingInput | undefined;
}

export interface CommonSettings {
  pageSize?: number | undefined;
  isMaintenanceMode?: boolean | undefined;
  freeShippingMinPrice?: number | undefined;
  defaultTheme?: string | undefined;
  defaultColor?: string | undefined;
}

export interface SiteSettings {
  name?: string | undefined;
  url?: string | undefined;
  logo?: string | undefined;
  slogan?: string | undefined;
  description?: string | undefined;
  keywords?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  author?: string | undefined;
  copyright?: string | undefined;
  address?: string | undefined;
}

export interface Carousel {
  title?: string | undefined;
  url?: string | undefined;
  image?: string | undefined;
  buttonCaption?: string | undefined;
}

export interface Language {
  name?: string | undefined;
  code?: string | undefined;
}

export interface Currency {
  name?: string | undefined;
  code?: string | undefined;
  convertRate?: number | undefined;
  symbol?: string | undefined;
}

export interface PaymentMethod {
  name?: string | undefined;
  commission?: number | undefined;
}

export const SETTING_PACKAGE_NAME = "setting";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseSetting(): Setting {
  return {
    id: "",
    carousels: [],
    availableLanguages: [],
    defaultLanguage: "",
    availableCurrencies: [],
    defaultCurrency: "",
    availablePaymentMethods: [],
    defaultPaymentMethod: "",
  };
}

export const Setting: MessageFns<Setting> = {
  encode(message: Setting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.common !== undefined) {
      CommonSettings.encode(message.common, writer.uint32(18).fork()).join();
    }
    if (message.site !== undefined) {
      SiteSettings.encode(message.site, writer.uint32(26).fork()).join();
    }
    for (const v of message.carousels) {
      Carousel.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.availableLanguages) {
      Language.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.defaultLanguage !== "") {
      writer.uint32(50).string(message.defaultLanguage);
    }
    for (const v of message.availableCurrencies) {
      Currency.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.defaultCurrency !== "") {
      writer.uint32(66).string(message.defaultCurrency);
    }
    for (const v of message.availablePaymentMethods) {
      PaymentMethod.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.defaultPaymentMethod !== "") {
      writer.uint32(82).string(message.defaultPaymentMethod);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(90).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Setting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.common = CommonSettings.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.site = SiteSettings.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.carousels.push(Carousel.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.availableLanguages.push(Language.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.defaultLanguage = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.availableCurrencies.push(Currency.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.defaultCurrency = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.availablePaymentMethods.push(PaymentMethod.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.defaultPaymentMethod = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Setting {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      common: isSet(object.common) ? CommonSettings.fromJSON(object.common) : undefined,
      site: isSet(object.site) ? SiteSettings.fromJSON(object.site) : undefined,
      carousels: globalThis.Array.isArray(object?.carousels)
        ? object.carousels.map((e: any) => Carousel.fromJSON(e))
        : [],
      availableLanguages: globalThis.Array.isArray(object?.availableLanguages)
        ? object.availableLanguages.map((e: any) => Language.fromJSON(e))
        : [],
      defaultLanguage: isSet(object.defaultLanguage) ? globalThis.String(object.defaultLanguage) : "",
      availableCurrencies: globalThis.Array.isArray(object?.availableCurrencies)
        ? object.availableCurrencies.map((e: any) => Currency.fromJSON(e))
        : [],
      defaultCurrency: isSet(object.defaultCurrency) ? globalThis.String(object.defaultCurrency) : "",
      availablePaymentMethods: globalThis.Array.isArray(object?.availablePaymentMethods)
        ? object.availablePaymentMethods.map((e: any) => PaymentMethod.fromJSON(e))
        : [],
      defaultPaymentMethod: isSet(object.defaultPaymentMethod) ? globalThis.String(object.defaultPaymentMethod) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Setting): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.common !== undefined) {
      obj.common = CommonSettings.toJSON(message.common);
    }
    if (message.site !== undefined) {
      obj.site = SiteSettings.toJSON(message.site);
    }
    if (message.carousels?.length) {
      obj.carousels = message.carousels.map((e) => Carousel.toJSON(e));
    }
    if (message.availableLanguages?.length) {
      obj.availableLanguages = message.availableLanguages.map((e) => Language.toJSON(e));
    }
    if (message.defaultLanguage !== "") {
      obj.defaultLanguage = message.defaultLanguage;
    }
    if (message.availableCurrencies?.length) {
      obj.availableCurrencies = message.availableCurrencies.map((e) => Currency.toJSON(e));
    }
    if (message.defaultCurrency !== "") {
      obj.defaultCurrency = message.defaultCurrency;
    }
    if (message.availablePaymentMethods?.length) {
      obj.availablePaymentMethods = message.availablePaymentMethods.map((e) => PaymentMethod.toJSON(e));
    }
    if (message.defaultPaymentMethod !== "") {
      obj.defaultPaymentMethod = message.defaultPaymentMethod;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseSettingInput(): SettingInput {
  return { carousels: [], availableLanguages: [], availableCurrencies: [], availablePaymentMethods: [] };
}

export const SettingInput: MessageFns<SettingInput> = {
  encode(message: SettingInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonSettings.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.site !== undefined) {
      SiteSettings.encode(message.site, writer.uint32(18).fork()).join();
    }
    for (const v of message.carousels) {
      Carousel.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.availableLanguages) {
      Language.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.defaultLanguage !== undefined) {
      writer.uint32(42).string(message.defaultLanguage);
    }
    for (const v of message.availableCurrencies) {
      Currency.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.defaultCurrency !== undefined) {
      writer.uint32(58).string(message.defaultCurrency);
    }
    for (const v of message.availablePaymentMethods) {
      PaymentMethod.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.defaultPaymentMethod !== undefined) {
      writer.uint32(74).string(message.defaultPaymentMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonSettings.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.site = SiteSettings.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.carousels.push(Carousel.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.availableLanguages.push(Language.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultLanguage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.availableCurrencies.push(Currency.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.defaultCurrency = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.availablePaymentMethods.push(PaymentMethod.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.defaultPaymentMethod = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SettingInput {
    return {
      common: isSet(object.common) ? CommonSettings.fromJSON(object.common) : undefined,
      site: isSet(object.site) ? SiteSettings.fromJSON(object.site) : undefined,
      carousels: globalThis.Array.isArray(object?.carousels)
        ? object.carousels.map((e: any) => Carousel.fromJSON(e))
        : [],
      availableLanguages: globalThis.Array.isArray(object?.availableLanguages)
        ? object.availableLanguages.map((e: any) => Language.fromJSON(e))
        : [],
      defaultLanguage: isSet(object.defaultLanguage) ? globalThis.String(object.defaultLanguage) : undefined,
      availableCurrencies: globalThis.Array.isArray(object?.availableCurrencies)
        ? object.availableCurrencies.map((e: any) => Currency.fromJSON(e))
        : [],
      defaultCurrency: isSet(object.defaultCurrency) ? globalThis.String(object.defaultCurrency) : undefined,
      availablePaymentMethods: globalThis.Array.isArray(object?.availablePaymentMethods)
        ? object.availablePaymentMethods.map((e: any) => PaymentMethod.fromJSON(e))
        : [],
      defaultPaymentMethod: isSet(object.defaultPaymentMethod)
        ? globalThis.String(object.defaultPaymentMethod)
        : undefined,
    };
  },

  toJSON(message: SettingInput): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonSettings.toJSON(message.common);
    }
    if (message.site !== undefined) {
      obj.site = SiteSettings.toJSON(message.site);
    }
    if (message.carousels?.length) {
      obj.carousels = message.carousels.map((e) => Carousel.toJSON(e));
    }
    if (message.availableLanguages?.length) {
      obj.availableLanguages = message.availableLanguages.map((e) => Language.toJSON(e));
    }
    if (message.defaultLanguage !== undefined) {
      obj.defaultLanguage = message.defaultLanguage;
    }
    if (message.availableCurrencies?.length) {
      obj.availableCurrencies = message.availableCurrencies.map((e) => Currency.toJSON(e));
    }
    if (message.defaultCurrency !== undefined) {
      obj.defaultCurrency = message.defaultCurrency;
    }
    if (message.availablePaymentMethods?.length) {
      obj.availablePaymentMethods = message.availablePaymentMethods.map((e) => PaymentMethod.toJSON(e));
    }
    if (message.defaultPaymentMethod !== undefined) {
      obj.defaultPaymentMethod = message.defaultPaymentMethod;
    }
    return obj;
  },
};

function createBaseUpdateSettingInput(): UpdateSettingInput {
  return { id: "" };
}

export const UpdateSettingInput: MessageFns<UpdateSettingInput> = {
  encode(message: UpdateSettingInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      SettingInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = SettingInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? SettingInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateSettingInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = SettingInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseCommonSettings(): CommonSettings {
  return {};
}

export const CommonSettings: MessageFns<CommonSettings> = {
  encode(message: CommonSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== undefined) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.isMaintenanceMode !== undefined) {
      writer.uint32(16).bool(message.isMaintenanceMode);
    }
    if (message.freeShippingMinPrice !== undefined) {
      writer.uint32(29).float(message.freeShippingMinPrice);
    }
    if (message.defaultTheme !== undefined) {
      writer.uint32(34).string(message.defaultTheme);
    }
    if (message.defaultColor !== undefined) {
      writer.uint32(42).string(message.defaultColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isMaintenanceMode = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.freeShippingMinPrice = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.defaultTheme = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonSettings {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      isMaintenanceMode: isSet(object.isMaintenanceMode) ? globalThis.Boolean(object.isMaintenanceMode) : undefined,
      freeShippingMinPrice: isSet(object.freeShippingMinPrice)
        ? globalThis.Number(object.freeShippingMinPrice)
        : undefined,
      defaultTheme: isSet(object.defaultTheme) ? globalThis.String(object.defaultTheme) : undefined,
      defaultColor: isSet(object.defaultColor) ? globalThis.String(object.defaultColor) : undefined,
    };
  },

  toJSON(message: CommonSettings): unknown {
    const obj: any = {};
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.isMaintenanceMode !== undefined) {
      obj.isMaintenanceMode = message.isMaintenanceMode;
    }
    if (message.freeShippingMinPrice !== undefined) {
      obj.freeShippingMinPrice = message.freeShippingMinPrice;
    }
    if (message.defaultTheme !== undefined) {
      obj.defaultTheme = message.defaultTheme;
    }
    if (message.defaultColor !== undefined) {
      obj.defaultColor = message.defaultColor;
    }
    return obj;
  },
};

function createBaseSiteSettings(): SiteSettings {
  return {};
}

export const SiteSettings: MessageFns<SiteSettings> = {
  encode(message: SiteSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.url !== undefined) {
      writer.uint32(18).string(message.url);
    }
    if (message.logo !== undefined) {
      writer.uint32(26).string(message.logo);
    }
    if (message.slogan !== undefined) {
      writer.uint32(34).string(message.slogan);
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    if (message.keywords !== undefined) {
      writer.uint32(50).string(message.keywords);
    }
    if (message.email !== undefined) {
      writer.uint32(58).string(message.email);
    }
    if (message.phone !== undefined) {
      writer.uint32(66).string(message.phone);
    }
    if (message.author !== undefined) {
      writer.uint32(74).string(message.author);
    }
    if (message.copyright !== undefined) {
      writer.uint32(82).string(message.copyright);
    }
    if (message.address !== undefined) {
      writer.uint32(90).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SiteSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSiteSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logo = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slogan = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.keywords = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.copyright = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SiteSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      logo: isSet(object.logo) ? globalThis.String(object.logo) : undefined,
      slogan: isSet(object.slogan) ? globalThis.String(object.slogan) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      keywords: isSet(object.keywords) ? globalThis.String(object.keywords) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      author: isSet(object.author) ? globalThis.String(object.author) : undefined,
      copyright: isSet(object.copyright) ? globalThis.String(object.copyright) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : undefined,
    };
  },

  toJSON(message: SiteSettings): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.logo !== undefined) {
      obj.logo = message.logo;
    }
    if (message.slogan !== undefined) {
      obj.slogan = message.slogan;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.keywords !== undefined) {
      obj.keywords = message.keywords;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.author !== undefined) {
      obj.author = message.author;
    }
    if (message.copyright !== undefined) {
      obj.copyright = message.copyright;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    return obj;
  },
};

function createBaseCarousel(): Carousel {
  return {};
}

export const Carousel: MessageFns<Carousel> = {
  encode(message: Carousel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.url !== undefined) {
      writer.uint32(18).string(message.url);
    }
    if (message.image !== undefined) {
      writer.uint32(26).string(message.image);
    }
    if (message.buttonCaption !== undefined) {
      writer.uint32(34).string(message.buttonCaption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Carousel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCarousel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.buttonCaption = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Carousel {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      image: isSet(object.image) ? globalThis.String(object.image) : undefined,
      buttonCaption: isSet(object.buttonCaption) ? globalThis.String(object.buttonCaption) : undefined,
    };
  },

  toJSON(message: Carousel): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.image !== undefined) {
      obj.image = message.image;
    }
    if (message.buttonCaption !== undefined) {
      obj.buttonCaption = message.buttonCaption;
    }
    return obj;
  },
};

function createBaseLanguage(): Language {
  return {};
}

export const Language: MessageFns<Language> = {
  encode(message: Language, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.code !== undefined) {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Language {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Language {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
    };
  },

  toJSON(message: Language): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    return obj;
  },
};

function createBaseCurrency(): Currency {
  return {};
}

export const Currency: MessageFns<Currency> = {
  encode(message: Currency, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.code !== undefined) {
      writer.uint32(18).string(message.code);
    }
    if (message.convertRate !== undefined) {
      writer.uint32(29).float(message.convertRate);
    }
    if (message.symbol !== undefined) {
      writer.uint32(34).string(message.symbol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Currency {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCurrency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.convertRate = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Currency {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      convertRate: isSet(object.convertRate) ? globalThis.Number(object.convertRate) : undefined,
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : undefined,
    };
  },

  toJSON(message: Currency): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.convertRate !== undefined) {
      obj.convertRate = message.convertRate;
    }
    if (message.symbol !== undefined) {
      obj.symbol = message.symbol;
    }
    return obj;
  },
};

function createBasePaymentMethod(): PaymentMethod {
  return {};
}

export const PaymentMethod: MessageFns<PaymentMethod> = {
  encode(message: PaymentMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.commission !== undefined) {
      writer.uint32(21).float(message.commission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.commission = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentMethod {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      commission: isSet(object.commission) ? globalThis.Number(object.commission) : undefined,
    };
  },

  toJSON(message: PaymentMethod): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.commission !== undefined) {
      obj.commission = message.commission;
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
