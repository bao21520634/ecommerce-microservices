// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";
import { Address } from "./address";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "order";

export enum OrderStatus {
  Draft = 0,
  WaitForConfirmation = 1,
  ReadyForDelivery = 2,
  Delivery = 3,
  Delivered = 4,
  Cancelled = 5,
  UNRECOGNIZED = -1,
}

export function orderStatusFromJSON(object: any): OrderStatus {
  switch (object) {
    case 0:
    case "Draft":
      return OrderStatus.Draft;
    case 1:
    case "WaitForConfirmation":
      return OrderStatus.WaitForConfirmation;
    case 2:
    case "ReadyForDelivery":
      return OrderStatus.ReadyForDelivery;
    case 3:
    case "Delivery":
      return OrderStatus.Delivery;
    case 4:
    case "Delivered":
      return OrderStatus.Delivered;
    case 5:
    case "Cancelled":
      return OrderStatus.Cancelled;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderStatus.UNRECOGNIZED;
  }
}

export function orderStatusToJSON(object: OrderStatus): string {
  switch (object) {
    case OrderStatus.Draft:
      return "Draft";
    case OrderStatus.WaitForConfirmation:
      return "WaitForConfirmation";
    case OrderStatus.ReadyForDelivery:
      return "ReadyForDelivery";
    case OrderStatus.Delivery:
      return "Delivery";
    case OrderStatus.Delivered:
      return "Delivered";
    case OrderStatus.Cancelled:
      return "Cancelled";
    case OrderStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PaymentStatus {
  Pending = 0,
  Paid = 1,
  UnPaid = 2,
  UNRECOGNIZED = -1,
}

export function paymentStatusFromJSON(object: any): PaymentStatus {
  switch (object) {
    case 0:
    case "Pending":
      return PaymentStatus.Pending;
    case 1:
    case "Paid":
      return PaymentStatus.Paid;
    case 2:
    case "UnPaid":
      return PaymentStatus.UnPaid;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentStatus.UNRECOGNIZED;
  }
}

export function paymentStatusToJSON(object: PaymentStatus): string {
  switch (object) {
    case PaymentStatus.Pending:
      return "Pending";
    case PaymentStatus.Paid:
      return "Paid";
    case PaymentStatus.UnPaid:
      return "UnPaid";
    case PaymentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ShippingStatus {
  Delivering = 0,
  UNRECOGNIZED = -1,
}

export function shippingStatusFromJSON(object: any): ShippingStatus {
  switch (object) {
    case 0:
    case "Delivering":
      return ShippingStatus.Delivering;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ShippingStatus.UNRECOGNIZED;
  }
}

export function shippingStatusToJSON(object: ShippingStatus): string {
  switch (object) {
    case ShippingStatus.Delivering:
      return "Delivering";
    case ShippingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Order {
  id: string;
  code: string;
  customerId: string;
  subTotal: number;
  discount: number;
  tax: number;
  total: number;
  note: string;
  address?: Address | undefined;
  orderStatus: OrderStatus;
  paymentStatus: PaymentStatus;
  shippingStatus: ShippingStatus;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface Orders {
  orders: Order[];
  totalCount: number;
  page: number;
  pageSize: number;
}

export interface OrderEdge {
  node?: Orders | undefined;
  cursor: string;
}

export interface OrderInput {
  code: string;
  customerId: string;
  subTotal: number;
  discount: number;
  tax: number;
  total: number;
  note: string;
  orderStatus: OrderStatus;
  paymentStatus: PaymentStatus;
  shippingStatus: ShippingStatus;
}

export interface CreateOrderInput {
  data?: OrderInput | undefined;
}

export interface CreateManyOrdersInput {
  orders: OrderInput[];
}

export interface UpdateOrderInput {
  id: string;
  data?: OrderInput | undefined;
}

export interface UpdateManyOrdersInput {
  filter?: Any | undefined;
  update?: OrderInput | undefined;
}

export interface DeleteManyOrdersInput {
  filter?: Any | undefined;
}

export interface NullableOrder {
  null?: NullValue | undefined;
  data?: Order | undefined;
}

export const ORDER_PACKAGE_NAME = "order";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseOrder(): Order {
  return {
    id: "",
    code: "",
    customerId: "",
    subTotal: 0,
    discount: 0,
    tax: 0,
    total: 0,
    note: "",
    orderStatus: 0,
    paymentStatus: 0,
    shippingStatus: 0,
  };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.customerId !== "") {
      writer.uint32(26).string(message.customerId);
    }
    if (message.subTotal !== 0) {
      writer.uint32(37).float(message.subTotal);
    }
    if (message.discount !== 0) {
      writer.uint32(45).float(message.discount);
    }
    if (message.tax !== 0) {
      writer.uint32(53).float(message.tax);
    }
    if (message.total !== 0) {
      writer.uint32(61).float(message.total);
    }
    if (message.note !== "") {
      writer.uint32(66).string(message.note);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(74).fork()).join();
    }
    if (message.orderStatus !== 0) {
      writer.uint32(80).int32(message.orderStatus);
    }
    if (message.paymentStatus !== 0) {
      writer.uint32(88).int32(message.paymentStatus);
    }
    if (message.shippingStatus !== 0) {
      writer.uint32(96).int32(message.shippingStatus);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(106).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.total = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.orderStatus = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.paymentStatus = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.shippingStatus = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      orderStatus: isSet(object.orderStatus) ? orderStatusFromJSON(object.orderStatus) : 0,
      paymentStatus: isSet(object.paymentStatus) ? paymentStatusFromJSON(object.paymentStatus) : 0,
      shippingStatus: isSet(object.shippingStatus) ? shippingStatusFromJSON(object.shippingStatus) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.orderStatus !== 0) {
      obj.orderStatus = orderStatusToJSON(message.orderStatus);
    }
    if (message.paymentStatus !== 0) {
      obj.paymentStatus = paymentStatusToJSON(message.paymentStatus);
    }
    if (message.shippingStatus !== 0) {
      obj.shippingStatus = shippingStatusToJSON(message.shippingStatus);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseOrders(): Orders {
  return { orders: [], totalCount: 0, page: 0, pageSize: 0 };
}

export const Orders: MessageFns<Orders> = {
  encode(message: Orders, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Orders {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Orders {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: Orders): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },
};

function createBaseOrderEdge(): OrderEdge {
  return { cursor: "" };
}

export const OrderEdge: MessageFns<OrderEdge> = {
  encode(message: OrderEdge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Orders.encode(message.node, writer.uint32(10).fork()).join();
    }
    if (message.cursor !== "") {
      writer.uint32(18).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderEdge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Orders.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderEdge {
    return {
      node: isSet(object.node) ? Orders.fromJSON(object.node) : undefined,
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
    };
  },

  toJSON(message: OrderEdge): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Orders.toJSON(message.node);
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },
};

function createBaseOrderInput(): OrderInput {
  return {
    code: "",
    customerId: "",
    subTotal: 0,
    discount: 0,
    tax: 0,
    total: 0,
    note: "",
    orderStatus: 0,
    paymentStatus: 0,
    shippingStatus: 0,
  };
}

export const OrderInput: MessageFns<OrderInput> = {
  encode(message: OrderInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.customerId !== "") {
      writer.uint32(18).string(message.customerId);
    }
    if (message.subTotal !== 0) {
      writer.uint32(29).float(message.subTotal);
    }
    if (message.discount !== 0) {
      writer.uint32(37).float(message.discount);
    }
    if (message.tax !== 0) {
      writer.uint32(45).float(message.tax);
    }
    if (message.total !== 0) {
      writer.uint32(53).float(message.total);
    }
    if (message.note !== "") {
      writer.uint32(58).string(message.note);
    }
    if (message.orderStatus !== 0) {
      writer.uint32(64).int32(message.orderStatus);
    }
    if (message.paymentStatus !== 0) {
      writer.uint32(72).int32(message.paymentStatus);
    }
    if (message.shippingStatus !== 0) {
      writer.uint32(80).int32(message.shippingStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.total = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.orderStatus = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.paymentStatus = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.shippingStatus = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderInput {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      orderStatus: isSet(object.orderStatus) ? orderStatusFromJSON(object.orderStatus) : 0,
      paymentStatus: isSet(object.paymentStatus) ? paymentStatusFromJSON(object.paymentStatus) : 0,
      shippingStatus: isSet(object.shippingStatus) ? shippingStatusFromJSON(object.shippingStatus) : 0,
    };
  },

  toJSON(message: OrderInput): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.orderStatus !== 0) {
      obj.orderStatus = orderStatusToJSON(message.orderStatus);
    }
    if (message.paymentStatus !== 0) {
      obj.paymentStatus = paymentStatusToJSON(message.paymentStatus);
    }
    if (message.shippingStatus !== 0) {
      obj.shippingStatus = shippingStatusToJSON(message.shippingStatus);
    }
    return obj;
  },
};

function createBaseCreateOrderInput(): CreateOrderInput {
  return {};
}

export const CreateOrderInput: MessageFns<CreateOrderInput> = {
  encode(message: CreateOrderInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      OrderInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = OrderInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderInput {
    return { data: isSet(object.data) ? OrderInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateOrderInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = OrderInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseCreateManyOrdersInput(): CreateManyOrdersInput {
  return { orders: [] };
}

export const CreateManyOrdersInput: MessageFns<CreateManyOrdersInput> = {
  encode(message: CreateManyOrdersInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      OrderInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyOrdersInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyOrdersInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(OrderInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyOrdersInput {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => OrderInput.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateManyOrdersInput): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => OrderInput.toJSON(e));
    }
    return obj;
  },
};

function createBaseUpdateOrderInput(): UpdateOrderInput {
  return { id: "" };
}

export const UpdateOrderInput: MessageFns<UpdateOrderInput> = {
  encode(message: UpdateOrderInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      OrderInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? OrderInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateOrderInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = OrderInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseUpdateManyOrdersInput(): UpdateManyOrdersInput {
  return {};
}

export const UpdateManyOrdersInput: MessageFns<UpdateManyOrdersInput> = {
  encode(message: UpdateManyOrdersInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      OrderInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyOrdersInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyOrdersInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = OrderInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyOrdersInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? OrderInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyOrdersInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = OrderInput.toJSON(message.update);
    }
    return obj;
  },
};

function createBaseDeleteManyOrdersInput(): DeleteManyOrdersInput {
  return {};
}

export const DeleteManyOrdersInput: MessageFns<DeleteManyOrdersInput> = {
  encode(message: DeleteManyOrdersInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyOrdersInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyOrdersInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyOrdersInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyOrdersInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },
};

function createBaseNullableOrder(): NullableOrder {
  return {};
}

export const NullableOrder: MessageFns<NullableOrder> = {
  encode(message: NullableOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      Order.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableOrder {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? Order.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableOrder): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = Order.toJSON(message.data);
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
