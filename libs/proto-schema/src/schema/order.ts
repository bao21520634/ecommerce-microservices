// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "order";

export interface Order {
  id: string;
  code: string;
  customerId: string;
  addressId: string;
  expectedDeliveryDate: string;
  paymentMethod: string;
  subTotal: number;
  discount: number;
  tax: number;
  deliveryFee: number;
  total: number;
  isPaid: boolean;
  paidAt?: Date | undefined;
  deliveredAt?: Date | undefined;
  note: string;
  orderStatus: string;
  paymentStatus: string;
  shippingStatus: string;
  paymentResult?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface Orders {
  orders: Order[];
}

export interface OrderInput {
  code: string;
  customerId: string;
  addressId?: string | undefined;
  expectedDeliveryDate?: string | undefined;
  paymentMethod?: string | undefined;
  subTotal: number;
  discount?: number | undefined;
  tax?: number | undefined;
  deliveryFee?: number | undefined;
  total: number;
  isPaid?: boolean | undefined;
  paidAt?: Date | undefined;
  deliveredAt?: Date | undefined;
  note?: string | undefined;
  orderStatus?: string | undefined;
  paymentStatus?: string | undefined;
  shippingStatus?: string | undefined;
  paymentResult?: string | undefined;
}

export interface CreateOrderInput {
  data?: OrderInput | undefined;
}

export interface CreateManyOrdersInput {
  orders: OrderInput[];
}

export interface UpdateOrderInput {
  id: string;
  data?: OrderInput | undefined;
}

export interface UpdateManyOrdersInput {
  filter?: Any | undefined;
  update?: OrderInput | undefined;
}

export interface DeleteManyOrdersInput {
  filter?: Any | undefined;
}

export interface NullableOrder {
  null?: NullValue | undefined;
  data?: Order | undefined;
}

export const ORDER_PACKAGE_NAME = "order";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseOrder(): Order {
  return {
    id: "",
    code: "",
    customerId: "",
    addressId: "",
    expectedDeliveryDate: "",
    paymentMethod: "",
    subTotal: 0,
    discount: 0,
    tax: 0,
    deliveryFee: 0,
    total: 0,
    isPaid: false,
    note: "",
    orderStatus: "",
    paymentStatus: "",
    shippingStatus: "",
  };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.customerId !== "") {
      writer.uint32(26).string(message.customerId);
    }
    if (message.addressId !== "") {
      writer.uint32(34).string(message.addressId);
    }
    if (message.expectedDeliveryDate !== "") {
      writer.uint32(42).string(message.expectedDeliveryDate);
    }
    if (message.paymentMethod !== "") {
      writer.uint32(50).string(message.paymentMethod);
    }
    if (message.subTotal !== 0) {
      writer.uint32(61).float(message.subTotal);
    }
    if (message.discount !== 0) {
      writer.uint32(69).float(message.discount);
    }
    if (message.tax !== 0) {
      writer.uint32(77).float(message.tax);
    }
    if (message.deliveryFee !== 0) {
      writer.uint32(85).float(message.deliveryFee);
    }
    if (message.total !== 0) {
      writer.uint32(93).float(message.total);
    }
    if (message.isPaid !== false) {
      writer.uint32(96).bool(message.isPaid);
    }
    if (message.paidAt !== undefined) {
      Timestamp.encode(toTimestamp(message.paidAt), writer.uint32(106).fork()).join();
    }
    if (message.deliveredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deliveredAt), writer.uint32(114).fork()).join();
    }
    if (message.note !== "") {
      writer.uint32(122).string(message.note);
    }
    if (message.orderStatus !== "") {
      writer.uint32(130).string(message.orderStatus);
    }
    if (message.paymentStatus !== "") {
      writer.uint32(138).string(message.paymentStatus);
    }
    if (message.shippingStatus !== "") {
      writer.uint32(146).string(message.shippingStatus);
    }
    if (message.paymentResult !== undefined) {
      writer.uint32(154).string(message.paymentResult);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(162).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(170).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.addressId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expectedDeliveryDate = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.paymentMethod = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.deliveryFee = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.total = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isPaid = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.paidAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.deliveredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.orderStatus = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.shippingStatus = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.paymentResult = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      addressId: isSet(object.addressId) ? globalThis.String(object.addressId) : "",
      expectedDeliveryDate: isSet(object.expectedDeliveryDate) ? globalThis.String(object.expectedDeliveryDate) : "",
      paymentMethod: isSet(object.paymentMethod) ? globalThis.String(object.paymentMethod) : "",
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      deliveryFee: isSet(object.deliveryFee) ? globalThis.Number(object.deliveryFee) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      isPaid: isSet(object.isPaid) ? globalThis.Boolean(object.isPaid) : false,
      paidAt: isSet(object.paidAt) ? fromJsonTimestamp(object.paidAt) : undefined,
      deliveredAt: isSet(object.deliveredAt) ? fromJsonTimestamp(object.deliveredAt) : undefined,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      orderStatus: isSet(object.orderStatus) ? globalThis.String(object.orderStatus) : "",
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : "",
      shippingStatus: isSet(object.shippingStatus) ? globalThis.String(object.shippingStatus) : "",
      paymentResult: isSet(object.paymentResult) ? globalThis.String(object.paymentResult) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.addressId !== "") {
      obj.addressId = message.addressId;
    }
    if (message.expectedDeliveryDate !== "") {
      obj.expectedDeliveryDate = message.expectedDeliveryDate;
    }
    if (message.paymentMethod !== "") {
      obj.paymentMethod = message.paymentMethod;
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.deliveryFee !== 0) {
      obj.deliveryFee = message.deliveryFee;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.isPaid !== false) {
      obj.isPaid = message.isPaid;
    }
    if (message.paidAt !== undefined) {
      obj.paidAt = message.paidAt.toISOString();
    }
    if (message.deliveredAt !== undefined) {
      obj.deliveredAt = message.deliveredAt.toISOString();
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.orderStatus !== "") {
      obj.orderStatus = message.orderStatus;
    }
    if (message.paymentStatus !== "") {
      obj.paymentStatus = message.paymentStatus;
    }
    if (message.shippingStatus !== "") {
      obj.shippingStatus = message.shippingStatus;
    }
    if (message.paymentResult !== undefined) {
      obj.paymentResult = message.paymentResult;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseOrders(): Orders {
  return { orders: [] };
}

export const Orders: MessageFns<Orders> = {
  encode(message: Orders, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Orders {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Orders {
    return { orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [] };
  },

  toJSON(message: Orders): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    return obj;
  },
};

function createBaseOrderInput(): OrderInput {
  return { code: "", customerId: "", subTotal: 0, total: 0 };
}

export const OrderInput: MessageFns<OrderInput> = {
  encode(message: OrderInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.customerId !== "") {
      writer.uint32(18).string(message.customerId);
    }
    if (message.addressId !== undefined) {
      writer.uint32(26).string(message.addressId);
    }
    if (message.expectedDeliveryDate !== undefined) {
      writer.uint32(34).string(message.expectedDeliveryDate);
    }
    if (message.paymentMethod !== undefined) {
      writer.uint32(42).string(message.paymentMethod);
    }
    if (message.subTotal !== 0) {
      writer.uint32(53).float(message.subTotal);
    }
    if (message.discount !== undefined) {
      writer.uint32(61).float(message.discount);
    }
    if (message.tax !== undefined) {
      writer.uint32(69).float(message.tax);
    }
    if (message.deliveryFee !== undefined) {
      writer.uint32(77).float(message.deliveryFee);
    }
    if (message.total !== 0) {
      writer.uint32(85).float(message.total);
    }
    if (message.isPaid !== undefined) {
      writer.uint32(88).bool(message.isPaid);
    }
    if (message.paidAt !== undefined) {
      Timestamp.encode(toTimestamp(message.paidAt), writer.uint32(98).fork()).join();
    }
    if (message.deliveredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deliveredAt), writer.uint32(106).fork()).join();
    }
    if (message.note !== undefined) {
      writer.uint32(114).string(message.note);
    }
    if (message.orderStatus !== undefined) {
      writer.uint32(122).string(message.orderStatus);
    }
    if (message.paymentStatus !== undefined) {
      writer.uint32(130).string(message.paymentStatus);
    }
    if (message.shippingStatus !== undefined) {
      writer.uint32(138).string(message.shippingStatus);
    }
    if (message.paymentResult !== undefined) {
      writer.uint32(146).string(message.paymentResult);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.addressId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expectedDeliveryDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paymentMethod = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.deliveryFee = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.total = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isPaid = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.paidAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.deliveredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.orderStatus = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.shippingStatus = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.paymentResult = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderInput {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      addressId: isSet(object.addressId) ? globalThis.String(object.addressId) : undefined,
      expectedDeliveryDate: isSet(object.expectedDeliveryDate)
        ? globalThis.String(object.expectedDeliveryDate)
        : undefined,
      paymentMethod: isSet(object.paymentMethod) ? globalThis.String(object.paymentMethod) : undefined,
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : undefined,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : undefined,
      deliveryFee: isSet(object.deliveryFee) ? globalThis.Number(object.deliveryFee) : undefined,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      isPaid: isSet(object.isPaid) ? globalThis.Boolean(object.isPaid) : undefined,
      paidAt: isSet(object.paidAt) ? fromJsonTimestamp(object.paidAt) : undefined,
      deliveredAt: isSet(object.deliveredAt) ? fromJsonTimestamp(object.deliveredAt) : undefined,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
      orderStatus: isSet(object.orderStatus) ? globalThis.String(object.orderStatus) : undefined,
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : undefined,
      shippingStatus: isSet(object.shippingStatus) ? globalThis.String(object.shippingStatus) : undefined,
      paymentResult: isSet(object.paymentResult) ? globalThis.String(object.paymentResult) : undefined,
    };
  },

  toJSON(message: OrderInput): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.addressId !== undefined) {
      obj.addressId = message.addressId;
    }
    if (message.expectedDeliveryDate !== undefined) {
      obj.expectedDeliveryDate = message.expectedDeliveryDate;
    }
    if (message.paymentMethod !== undefined) {
      obj.paymentMethod = message.paymentMethod;
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== undefined) {
      obj.discount = message.discount;
    }
    if (message.tax !== undefined) {
      obj.tax = message.tax;
    }
    if (message.deliveryFee !== undefined) {
      obj.deliveryFee = message.deliveryFee;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.isPaid !== undefined) {
      obj.isPaid = message.isPaid;
    }
    if (message.paidAt !== undefined) {
      obj.paidAt = message.paidAt.toISOString();
    }
    if (message.deliveredAt !== undefined) {
      obj.deliveredAt = message.deliveredAt.toISOString();
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    if (message.orderStatus !== undefined) {
      obj.orderStatus = message.orderStatus;
    }
    if (message.paymentStatus !== undefined) {
      obj.paymentStatus = message.paymentStatus;
    }
    if (message.shippingStatus !== undefined) {
      obj.shippingStatus = message.shippingStatus;
    }
    if (message.paymentResult !== undefined) {
      obj.paymentResult = message.paymentResult;
    }
    return obj;
  },
};

function createBaseCreateOrderInput(): CreateOrderInput {
  return {};
}

export const CreateOrderInput: MessageFns<CreateOrderInput> = {
  encode(message: CreateOrderInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      OrderInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = OrderInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderInput {
    return { data: isSet(object.data) ? OrderInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateOrderInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = OrderInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseCreateManyOrdersInput(): CreateManyOrdersInput {
  return { orders: [] };
}

export const CreateManyOrdersInput: MessageFns<CreateManyOrdersInput> = {
  encode(message: CreateManyOrdersInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      OrderInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyOrdersInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyOrdersInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(OrderInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyOrdersInput {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => OrderInput.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateManyOrdersInput): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => OrderInput.toJSON(e));
    }
    return obj;
  },
};

function createBaseUpdateOrderInput(): UpdateOrderInput {
  return { id: "" };
}

export const UpdateOrderInput: MessageFns<UpdateOrderInput> = {
  encode(message: UpdateOrderInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      OrderInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? OrderInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateOrderInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = OrderInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseUpdateManyOrdersInput(): UpdateManyOrdersInput {
  return {};
}

export const UpdateManyOrdersInput: MessageFns<UpdateManyOrdersInput> = {
  encode(message: UpdateManyOrdersInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      OrderInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyOrdersInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyOrdersInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = OrderInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyOrdersInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? OrderInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyOrdersInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = OrderInput.toJSON(message.update);
    }
    return obj;
  },
};

function createBaseDeleteManyOrdersInput(): DeleteManyOrdersInput {
  return {};
}

export const DeleteManyOrdersInput: MessageFns<DeleteManyOrdersInput> = {
  encode(message: DeleteManyOrdersInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyOrdersInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyOrdersInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyOrdersInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyOrdersInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },
};

function createBaseNullableOrder(): NullableOrder {
  return {};
}

export const NullableOrder: MessageFns<NullableOrder> = {
  encode(message: NullableOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      Order.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableOrder {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? Order.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableOrder): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = Order.toJSON(message.data);
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
