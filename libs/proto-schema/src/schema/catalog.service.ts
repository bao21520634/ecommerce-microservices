// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: catalog.service.proto

/* eslint-disable */
import {
  Categories,
  Category,
  CreateCategoryInput,
  CreateManyCategoriesInput,
  DeleteManyCategoriesInput,
  NullableCategory,
  UpdateCategoryInput,
  UpdateManyCategoriesInput,
} from "./category";
import { Count, DeleteManyResponse, Id, Query } from "./common";
import {
  CreateManyProductsInput,
  CreateProductInput,
  DeleteManyProductsInput,
  NullableProduct,
  Product,
  Products,
  UpdateManyProductsInput,
  UpdateProductInput,
} from "./product";
import {
  CreateManyProductCategoriesInput,
  CreateProductCategoryInput,
  DeleteManyProductCategoriesInput,
  NullableProductCategory,
  ProductCategories,
  ProductCategory,
  UpdateManyProductCategoriesInput,
  UpdateProductCategoryInput,
} from "./productCategory";

export const protobufPackage = "catalog";

export interface CatalogService<Context extends DataLoaders> {
  /** category */
  category(ctx: Context, request: Id): Promise<NullableCategory>;
  categories(ctx: Context, request: Query): Promise<Categories>;
  categoriesTotal(ctx: Context, request: Query): Promise<Count>;
  createCategory(ctx: Context, request: CreateCategoryInput): Promise<Category>;
  createManyCategories(ctx: Context, request: CreateManyCategoriesInput): Promise<Categories>;
  updateCategory(ctx: Context, request: UpdateCategoryInput): Promise<Category>;
  updateManyCategories(ctx: Context, request: UpdateManyCategoriesInput): Promise<Categories>;
  deleteCategory(ctx: Context, request: Id): Promise<Category>;
  deleteManyCategories(ctx: Context, request: DeleteManyCategoriesInput): Promise<DeleteManyResponse>;
  /** product */
  product(ctx: Context, request: Id): Promise<NullableProduct>;
  products(ctx: Context, request: Query): Promise<Products>;
  productsTotal(ctx: Context, request: Query): Promise<Count>;
  createProduct(ctx: Context, request: CreateProductInput): Promise<Product>;
  createManyProducts(ctx: Context, request: CreateManyProductsInput): Promise<Products>;
  updateProduct(ctx: Context, request: UpdateProductInput): Promise<Product>;
  updateManyProducts(ctx: Context, request: UpdateManyProductsInput): Promise<Products>;
  deleteProduct(ctx: Context, request: Id): Promise<Product>;
  deleteManyProducts(ctx: Context, request: DeleteManyProductsInput): Promise<DeleteManyResponse>;
  /** product category */
  productCategory(ctx: Context, request: Id): Promise<NullableProductCategory>;
  productCategories(ctx: Context, request: Query): Promise<ProductCategories>;
  productCategoriesTotal(ctx: Context, request: Query): Promise<Count>;
  createProductCategory(ctx: Context, request: CreateProductCategoryInput): Promise<ProductCategory>;
  createManyProductCategories(ctx: Context, request: CreateManyProductCategoriesInput): Promise<ProductCategory>;
  updateProductCategory(ctx: Context, request: UpdateProductCategoryInput): Promise<ProductCategory>;
  updateManyProductCategories(ctx: Context, request: UpdateManyProductCategoriesInput): Promise<ProductCategories>;
  deleteProductCategory(ctx: Context, request: Id): Promise<ProductCategory>;
  deleteManyProductCategories(ctx: Context, request: DeleteManyProductCategoriesInput): Promise<DeleteManyResponse>;
}

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}
