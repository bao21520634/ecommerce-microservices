// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: paymentHistory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ChargeResponse } from "./charge";
import { Order } from "./order";

export const protobufPackage = "paymentHistory";

export interface PaymentHistoryRequest {
  customerId: string;
  page: number;
  pageSize: number;
}

export interface PaymentHistoryResponse {
  charges: ChargeResponse[];
  totalCount: number;
  page: number;
  pageSize: number;
}

export interface OrderPaymentDetailsResponse {
  order: Order | undefined;
  chargeDetails: ChargeResponse | undefined;
}

export interface GetOrderPaymentDetailsRequest {
  orderId: string;
}

function createBasePaymentHistoryRequest(): PaymentHistoryRequest {
  return { customerId: "", page: 0, pageSize: 0 };
}

export const PaymentHistoryRequest: MessageFns<PaymentHistoryRequest> = {
  encode(message: PaymentHistoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentHistoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentHistoryRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: PaymentHistoryRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentHistoryRequest>, I>>(base?: I): PaymentHistoryRequest {
    return PaymentHistoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentHistoryRequest>, I>>(object: I): PaymentHistoryRequest {
    const message = createBasePaymentHistoryRequest();
    message.customerId = object.customerId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBasePaymentHistoryResponse(): PaymentHistoryResponse {
  return { charges: [], totalCount: 0, page: 0, pageSize: 0 };
}

export const PaymentHistoryResponse: MessageFns<PaymentHistoryResponse> = {
  encode(message: PaymentHistoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.charges) {
      ChargeResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentHistoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.charges.push(ChargeResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentHistoryResponse {
    return {
      charges: globalThis.Array.isArray(object?.charges)
        ? object.charges.map((e: any) => ChargeResponse.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: PaymentHistoryResponse): unknown {
    const obj: any = {};
    if (message.charges?.length) {
      obj.charges = message.charges.map((e) => ChargeResponse.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentHistoryResponse>, I>>(base?: I): PaymentHistoryResponse {
    return PaymentHistoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentHistoryResponse>, I>>(object: I): PaymentHistoryResponse {
    const message = createBasePaymentHistoryResponse();
    message.charges = object.charges?.map((e) => ChargeResponse.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseOrderPaymentDetailsResponse(): OrderPaymentDetailsResponse {
  return { order: undefined, chargeDetails: undefined };
}

export const OrderPaymentDetailsResponse: MessageFns<OrderPaymentDetailsResponse> = {
  encode(message: OrderPaymentDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).join();
    }
    if (message.chargeDetails !== undefined) {
      ChargeResponse.encode(message.chargeDetails, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderPaymentDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderPaymentDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chargeDetails = ChargeResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderPaymentDetailsResponse {
    return {
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      chargeDetails: isSet(object.chargeDetails) ? ChargeResponse.fromJSON(object.chargeDetails) : undefined,
    };
  },

  toJSON(message: OrderPaymentDetailsResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.chargeDetails !== undefined) {
      obj.chargeDetails = ChargeResponse.toJSON(message.chargeDetails);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderPaymentDetailsResponse>, I>>(base?: I): OrderPaymentDetailsResponse {
    return OrderPaymentDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderPaymentDetailsResponse>, I>>(object: I): OrderPaymentDetailsResponse {
    const message = createBaseOrderPaymentDetailsResponse();
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.chargeDetails = (object.chargeDetails !== undefined && object.chargeDetails !== null)
      ? ChargeResponse.fromPartial(object.chargeDetails)
      : undefined;
    return message;
  },
};

function createBaseGetOrderPaymentDetailsRequest(): GetOrderPaymentDetailsRequest {
  return { orderId: "" };
}

export const GetOrderPaymentDetailsRequest: MessageFns<GetOrderPaymentDetailsRequest> = {
  encode(message: GetOrderPaymentDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderPaymentDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderPaymentDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderPaymentDetailsRequest {
    return { orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "" };
  },

  toJSON(message: GetOrderPaymentDetailsRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderPaymentDetailsRequest>, I>>(base?: I): GetOrderPaymentDetailsRequest {
    return GetOrderPaymentDetailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderPaymentDetailsRequest>, I>>(
    object: I,
  ): GetOrderPaymentDetailsRequest {
    const message = createBaseGetOrderPaymentDetailsRequest();
    message.orderId = object.orderId ?? "";
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
