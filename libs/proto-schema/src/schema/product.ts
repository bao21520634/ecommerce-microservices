// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageInfo } from "./common";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";
import { StringValue } from "./google/protobuf/wrappers";

export const protobufPackage = "product";

export enum ProductType {
  Simple = 0,
  Variant = 1,
  UNRECOGNIZED = -1,
}

export function productTypeFromJSON(object: any): ProductType {
  switch (object) {
    case 0:
    case "Simple":
      return ProductType.Simple;
    case 1:
    case "Variant":
      return ProductType.Variant;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductType.UNRECOGNIZED;
  }
}

export function productTypeToJSON(object: ProductType): string {
  switch (object) {
    case ProductType.Simple:
      return "Simple";
    case ProductType.Variant:
      return "Variant";
    case ProductType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ProductStatus {
  Active = 0,
  Locked = 1,
  Deleted = 2,
  UNRECOGNIZED = -1,
}

export function productStatusFromJSON(object: any): ProductStatus {
  switch (object) {
    case 0:
    case "Active":
      return ProductStatus.Active;
    case 1:
    case "Locked":
      return ProductStatus.Locked;
    case 2:
    case "Deleted":
      return ProductStatus.Deleted;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductStatus.UNRECOGNIZED;
  }
}

export function productStatusToJSON(object: ProductStatus): string {
  switch (object) {
    case ProductStatus.Active:
      return "Active";
    case ProductStatus.Locked:
      return "Locked";
    case ProductStatus.Deleted:
      return "Deleted";
    case ProductStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Product {
  id: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
  createdBy: string | undefined;
  updatedBy: string | undefined;
  deletedBy: string | undefined;
  name: string;
  slug: string;
  shortDescription: string | undefined;
  longDescription: string | undefined;
  thumbnailUrl: string | undefined;
  productType: ProductType;
  productTemplateId: string | undefined;
  manufacturerId: string | undefined;
  sortOrder: number;
  metaTitle: string | undefined;
  metaDescription: string | undefined;
  metaKeywords: string | undefined;
  tags: string | undefined;
  allowCustomMetaTag: boolean;
  limitedToLocations: boolean;
  limitedToStores: boolean;
  status: ProductStatus;
  displayPrice: boolean;
  shippable: boolean;
  weight: number;
  length: number;
  width: number;
  height: number;
  taxCategory: string;
  taxPercent: number;
  priceExclTax: number;
  priceInclTax: number;
  unit: string;
  stockAvailability: number;
  attributes: string;
  variantAttributes: string;
}

export interface Products {
  products: Product[];
}

export interface ProductEdge {
  node: Products | undefined;
  cursor: string;
}

export interface ProductConnection {
  pageInfo: PageInfo | undefined;
  totalCount: number;
  edges: ProductEdge[];
}

export interface ProductInput {
  name: string;
  slug: string;
  shortDescription: string;
  longDescription: string;
  thumbnailUrl: string;
  productType: ProductType;
  productTemplateId: string;
  manufacturerId: string;
  sortOrder: number;
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string;
  tags: string;
  allowCustomMetaTag: boolean;
  limitedToLocations: boolean;
  limitedToStores: boolean;
  status: ProductStatus;
  displayPrice: boolean;
  shippable: boolean;
  weight: number;
  length: number;
  width: number;
  height: number;
  taxCategory: string;
  taxPercent: number;
  priceExclTax: number;
  priceInclTax: number;
  unit: string;
  stockAvailability: number;
  attributes: string;
  variantAttributes: string;
}

export interface CreateProductInput {
  data: ProductInput | undefined;
}

export interface CreateManyProductsInput {
  Products: ProductInput[];
}

export interface UpdateProductInput {
  id: string;
  data: ProductInput | undefined;
}

export interface UpdateManyProductsInput {
  filter: Any | undefined;
  update: ProductInput | undefined;
}

export interface DeleteManyProductsInput {
  filter: Any | undefined;
}

export interface NullableProduct {
  null?: NullValue | undefined;
  data?: Product | undefined;
}

function createBaseProduct(): Product {
  return {
    id: "",
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    createdBy: undefined,
    updatedBy: undefined,
    deletedBy: undefined,
    name: "",
    slug: "",
    shortDescription: undefined,
    longDescription: undefined,
    thumbnailUrl: undefined,
    productType: 0,
    productTemplateId: undefined,
    manufacturerId: undefined,
    sortOrder: 0,
    metaTitle: undefined,
    metaDescription: undefined,
    metaKeywords: undefined,
    tags: undefined,
    allowCustomMetaTag: false,
    limitedToLocations: false,
    limitedToStores: false,
    status: 0,
    displayPrice: false,
    shippable: false,
    weight: 0,
    length: 0,
    width: 0,
    height: 0,
    taxCategory: "",
    taxPercent: 0,
    priceExclTax: 0,
    priceInclTax: 0,
    unit: "",
    stockAvailability: 0,
    attributes: "",
    variantAttributes: "",
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(34).fork()).join();
    }
    if (message.createdBy !== undefined) {
      StringValue.encode({ value: message.createdBy! }, writer.uint32(42).fork()).join();
    }
    if (message.updatedBy !== undefined) {
      StringValue.encode({ value: message.updatedBy! }, writer.uint32(50).fork()).join();
    }
    if (message.deletedBy !== undefined) {
      StringValue.encode({ value: message.deletedBy! }, writer.uint32(58).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(66).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(74).string(message.slug);
    }
    if (message.shortDescription !== undefined) {
      StringValue.encode({ value: message.shortDescription! }, writer.uint32(82).fork()).join();
    }
    if (message.longDescription !== undefined) {
      StringValue.encode({ value: message.longDescription! }, writer.uint32(90).fork()).join();
    }
    if (message.thumbnailUrl !== undefined) {
      StringValue.encode({ value: message.thumbnailUrl! }, writer.uint32(98).fork()).join();
    }
    if (message.productType !== 0) {
      writer.uint32(104).int32(message.productType);
    }
    if (message.productTemplateId !== undefined) {
      StringValue.encode({ value: message.productTemplateId! }, writer.uint32(114).fork()).join();
    }
    if (message.manufacturerId !== undefined) {
      StringValue.encode({ value: message.manufacturerId! }, writer.uint32(122).fork()).join();
    }
    if (message.sortOrder !== 0) {
      writer.uint32(128).int32(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      StringValue.encode({ value: message.metaTitle! }, writer.uint32(138).fork()).join();
    }
    if (message.metaDescription !== undefined) {
      StringValue.encode({ value: message.metaDescription! }, writer.uint32(146).fork()).join();
    }
    if (message.metaKeywords !== undefined) {
      StringValue.encode({ value: message.metaKeywords! }, writer.uint32(154).fork()).join();
    }
    if (message.tags !== undefined) {
      StringValue.encode({ value: message.tags! }, writer.uint32(162).fork()).join();
    }
    if (message.allowCustomMetaTag !== false) {
      writer.uint32(168).bool(message.allowCustomMetaTag);
    }
    if (message.limitedToLocations !== false) {
      writer.uint32(176).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== false) {
      writer.uint32(184).bool(message.limitedToStores);
    }
    if (message.status !== 0) {
      writer.uint32(192).int32(message.status);
    }
    if (message.displayPrice !== false) {
      writer.uint32(200).bool(message.displayPrice);
    }
    if (message.shippable !== false) {
      writer.uint32(208).bool(message.shippable);
    }
    if (message.weight !== 0) {
      writer.uint32(221).float(message.weight);
    }
    if (message.length !== 0) {
      writer.uint32(229).float(message.length);
    }
    if (message.width !== 0) {
      writer.uint32(237).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(245).float(message.height);
    }
    if (message.taxCategory !== "") {
      writer.uint32(250).string(message.taxCategory);
    }
    if (message.taxPercent !== 0) {
      writer.uint32(261).float(message.taxPercent);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(269).float(message.priceExclTax);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(277).float(message.priceInclTax);
    }
    if (message.unit !== "") {
      writer.uint32(282).string(message.unit);
    }
    if (message.stockAvailability !== 0) {
      writer.uint32(288).int32(message.stockAvailability);
    }
    if (message.attributes !== "") {
      writer.uint32(298).string(message.attributes);
    }
    if (message.variantAttributes !== "") {
      writer.uint32(306).string(message.variantAttributes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.shortDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.longDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.thumbnailUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.productType = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.productTemplateId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.manufacturerId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.metaTitle = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.metaDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.metaKeywords = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.tags = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.allowCustomMetaTag = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.displayPrice = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.shippable = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 221) {
            break;
          }

          message.weight = reader.float();
          continue;
        }
        case 28: {
          if (tag !== 229) {
            break;
          }

          message.length = reader.float();
          continue;
        }
        case 29: {
          if (tag !== 237) {
            break;
          }

          message.width = reader.float();
          continue;
        }
        case 30: {
          if (tag !== 245) {
            break;
          }

          message.height = reader.float();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.taxCategory = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 261) {
            break;
          }

          message.taxPercent = reader.float();
          continue;
        }
        case 33: {
          if (tag !== 269) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 34: {
          if (tag !== 277) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.stockAvailability = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.attributes = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.variantAttributes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      createdBy: isSet(object.createdBy) ? String(object.createdBy) : undefined,
      updatedBy: isSet(object.updatedBy) ? String(object.updatedBy) : undefined,
      deletedBy: isSet(object.deletedBy) ? String(object.deletedBy) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? String(object.shortDescription) : undefined,
      longDescription: isSet(object.longDescription) ? String(object.longDescription) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? String(object.thumbnailUrl) : undefined,
      productType: isSet(object.productType) ? productTypeFromJSON(object.productType) : 0,
      productTemplateId: isSet(object.productTemplateId) ? String(object.productTemplateId) : undefined,
      manufacturerId: isSet(object.manufacturerId) ? String(object.manufacturerId) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : 0,
      metaTitle: isSet(object.metaTitle) ? String(object.metaTitle) : undefined,
      metaDescription: isSet(object.metaDescription) ? String(object.metaDescription) : undefined,
      metaKeywords: isSet(object.metaKeywords) ? String(object.metaKeywords) : undefined,
      tags: isSet(object.tags) ? String(object.tags) : undefined,
      allowCustomMetaTag: isSet(object.allowCustomMetaTag) ? globalThis.Boolean(object.allowCustomMetaTag) : false,
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : false,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : false,
      status: isSet(object.status) ? productStatusFromJSON(object.status) : 0,
      displayPrice: isSet(object.displayPrice) ? globalThis.Boolean(object.displayPrice) : false,
      shippable: isSet(object.shippable) ? globalThis.Boolean(object.shippable) : false,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      taxCategory: isSet(object.taxCategory) ? globalThis.String(object.taxCategory) : "",
      taxPercent: isSet(object.taxPercent) ? globalThis.Number(object.taxPercent) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
      stockAvailability: isSet(object.stockAvailability) ? globalThis.Number(object.stockAvailability) : 0,
      attributes: isSet(object.attributes) ? globalThis.String(object.attributes) : "",
      variantAttributes: isSet(object.variantAttributes) ? globalThis.String(object.variantAttributes) : "",
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = message.createdBy;
    }
    if (message.updatedBy !== undefined) {
      obj.updatedBy = message.updatedBy;
    }
    if (message.deletedBy !== undefined) {
      obj.deletedBy = message.deletedBy;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== undefined) {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== undefined) {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.productType !== 0) {
      obj.productType = productTypeToJSON(message.productType);
    }
    if (message.productTemplateId !== undefined) {
      obj.productTemplateId = message.productTemplateId;
    }
    if (message.manufacturerId !== undefined) {
      obj.manufacturerId = message.manufacturerId;
    }
    if (message.sortOrder !== 0) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== undefined) {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== undefined) {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.tags !== undefined) {
      obj.tags = message.tags;
    }
    if (message.allowCustomMetaTag !== false) {
      obj.allowCustomMetaTag = message.allowCustomMetaTag;
    }
    if (message.limitedToLocations !== false) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== false) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.status !== 0) {
      obj.status = productStatusToJSON(message.status);
    }
    if (message.displayPrice !== false) {
      obj.displayPrice = message.displayPrice;
    }
    if (message.shippable !== false) {
      obj.shippable = message.shippable;
    }
    if (message.weight !== 0) {
      obj.weight = message.weight;
    }
    if (message.length !== 0) {
      obj.length = message.length;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.taxCategory !== "") {
      obj.taxCategory = message.taxCategory;
    }
    if (message.taxPercent !== 0) {
      obj.taxPercent = message.taxPercent;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    if (message.stockAvailability !== 0) {
      obj.stockAvailability = Math.round(message.stockAvailability);
    }
    if (message.attributes !== "") {
      obj.attributes = message.attributes;
    }
    if (message.variantAttributes !== "") {
      obj.variantAttributes = message.variantAttributes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.updatedBy = object.updatedBy ?? undefined;
    message.deletedBy = object.deletedBy ?? undefined;
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.shortDescription = object.shortDescription ?? undefined;
    message.longDescription = object.longDescription ?? undefined;
    message.thumbnailUrl = object.thumbnailUrl ?? undefined;
    message.productType = object.productType ?? 0;
    message.productTemplateId = object.productTemplateId ?? undefined;
    message.manufacturerId = object.manufacturerId ?? undefined;
    message.sortOrder = object.sortOrder ?? 0;
    message.metaTitle = object.metaTitle ?? undefined;
    message.metaDescription = object.metaDescription ?? undefined;
    message.metaKeywords = object.metaKeywords ?? undefined;
    message.tags = object.tags ?? undefined;
    message.allowCustomMetaTag = object.allowCustomMetaTag ?? false;
    message.limitedToLocations = object.limitedToLocations ?? false;
    message.limitedToStores = object.limitedToStores ?? false;
    message.status = object.status ?? 0;
    message.displayPrice = object.displayPrice ?? false;
    message.shippable = object.shippable ?? false;
    message.weight = object.weight ?? 0;
    message.length = object.length ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.taxCategory = object.taxCategory ?? "";
    message.taxPercent = object.taxPercent ?? 0;
    message.priceExclTax = object.priceExclTax ?? 0;
    message.priceInclTax = object.priceInclTax ?? 0;
    message.unit = object.unit ?? "";
    message.stockAvailability = object.stockAvailability ?? 0;
    message.attributes = object.attributes ?? "";
    message.variantAttributes = object.variantAttributes ?? "";
    return message;
  },
};

function createBaseProducts(): Products {
  return { products: [] };
}

export const Products: MessageFns<Products> = {
  encode(message: Products, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Products {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProducts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Products {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: Products): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Products>, I>>(base?: I): Products {
    return Products.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Products>, I>>(object: I): Products {
    const message = createBaseProducts();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductEdge(): ProductEdge {
  return { node: undefined, cursor: "" };
}

export const ProductEdge: MessageFns<ProductEdge> = {
  encode(message: ProductEdge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Products.encode(message.node, writer.uint32(10).fork()).join();
    }
    if (message.cursor !== "") {
      writer.uint32(18).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductEdge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Products.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductEdge {
    return {
      node: isSet(object.node) ? Products.fromJSON(object.node) : undefined,
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
    };
  },

  toJSON(message: ProductEdge): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Products.toJSON(message.node);
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductEdge>, I>>(base?: I): ProductEdge {
    return ProductEdge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductEdge>, I>>(object: I): ProductEdge {
    const message = createBaseProductEdge();
    message.node = (object.node !== undefined && object.node !== null) ? Products.fromPartial(object.node) : undefined;
    message.cursor = object.cursor ?? "";
    return message;
  },
};

function createBaseProductConnection(): ProductConnection {
  return { pageInfo: undefined, totalCount: 0, edges: [] };
}

export const ProductConnection: MessageFns<ProductConnection> = {
  encode(message: ProductConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageInfo !== undefined) {
      PageInfo.encode(message.pageInfo, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    for (const v of message.edges) {
      ProductEdge.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageInfo = PageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.edges.push(ProductEdge.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductConnection {
    return {
      pageInfo: isSet(object.pageInfo) ? PageInfo.fromJSON(object.pageInfo) : undefined,
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => ProductEdge.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProductConnection): unknown {
    const obj: any = {};
    if (message.pageInfo !== undefined) {
      obj.pageInfo = PageInfo.toJSON(message.pageInfo);
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => ProductEdge.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductConnection>, I>>(base?: I): ProductConnection {
    return ProductConnection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductConnection>, I>>(object: I): ProductConnection {
    const message = createBaseProductConnection();
    message.pageInfo = (object.pageInfo !== undefined && object.pageInfo !== null)
      ? PageInfo.fromPartial(object.pageInfo)
      : undefined;
    message.totalCount = object.totalCount ?? 0;
    message.edges = object.edges?.map((e) => ProductEdge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductInput(): ProductInput {
  return {
    name: "",
    slug: "",
    shortDescription: "",
    longDescription: "",
    thumbnailUrl: "",
    productType: 0,
    productTemplateId: "",
    manufacturerId: "",
    sortOrder: 0,
    metaTitle: "",
    metaDescription: "",
    metaKeywords: "",
    tags: "",
    allowCustomMetaTag: false,
    limitedToLocations: false,
    limitedToStores: false,
    status: 0,
    displayPrice: false,
    shippable: false,
    weight: 0,
    length: 0,
    width: 0,
    height: 0,
    taxCategory: "",
    taxPercent: 0,
    priceExclTax: 0,
    priceInclTax: 0,
    unit: "",
    stockAvailability: 0,
    attributes: "",
    variantAttributes: "",
  };
}

export const ProductInput: MessageFns<ProductInput> = {
  encode(message: ProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(66).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(74).string(message.slug);
    }
    if (message.shortDescription !== "") {
      writer.uint32(82).string(message.shortDescription);
    }
    if (message.longDescription !== "") {
      writer.uint32(90).string(message.longDescription);
    }
    if (message.thumbnailUrl !== "") {
      writer.uint32(98).string(message.thumbnailUrl);
    }
    if (message.productType !== 0) {
      writer.uint32(104).int32(message.productType);
    }
    if (message.productTemplateId !== "") {
      writer.uint32(114).string(message.productTemplateId);
    }
    if (message.manufacturerId !== "") {
      writer.uint32(122).string(message.manufacturerId);
    }
    if (message.sortOrder !== 0) {
      writer.uint32(128).int32(message.sortOrder);
    }
    if (message.metaTitle !== "") {
      writer.uint32(138).string(message.metaTitle);
    }
    if (message.metaDescription !== "") {
      writer.uint32(146).string(message.metaDescription);
    }
    if (message.metaKeywords !== "") {
      writer.uint32(154).string(message.metaKeywords);
    }
    if (message.tags !== "") {
      writer.uint32(162).string(message.tags);
    }
    if (message.allowCustomMetaTag !== false) {
      writer.uint32(168).bool(message.allowCustomMetaTag);
    }
    if (message.limitedToLocations !== false) {
      writer.uint32(176).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== false) {
      writer.uint32(184).bool(message.limitedToStores);
    }
    if (message.status !== 0) {
      writer.uint32(192).int32(message.status);
    }
    if (message.displayPrice !== false) {
      writer.uint32(200).bool(message.displayPrice);
    }
    if (message.shippable !== false) {
      writer.uint32(208).bool(message.shippable);
    }
    if (message.weight !== 0) {
      writer.uint32(221).float(message.weight);
    }
    if (message.length !== 0) {
      writer.uint32(229).float(message.length);
    }
    if (message.width !== 0) {
      writer.uint32(237).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(245).float(message.height);
    }
    if (message.taxCategory !== "") {
      writer.uint32(250).string(message.taxCategory);
    }
    if (message.taxPercent !== 0) {
      writer.uint32(261).float(message.taxPercent);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(269).float(message.priceExclTax);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(277).float(message.priceInclTax);
    }
    if (message.unit !== "") {
      writer.uint32(282).string(message.unit);
    }
    if (message.stockAvailability !== 0) {
      writer.uint32(288).int32(message.stockAvailability);
    }
    if (message.attributes !== "") {
      writer.uint32(298).string(message.attributes);
    }
    if (message.variantAttributes !== "") {
      writer.uint32(306).string(message.variantAttributes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.longDescription = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.productType = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.productTemplateId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.manufacturerId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.metaTitle = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.metaDescription = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.tags = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.allowCustomMetaTag = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.displayPrice = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.shippable = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 221) {
            break;
          }

          message.weight = reader.float();
          continue;
        }
        case 28: {
          if (tag !== 229) {
            break;
          }

          message.length = reader.float();
          continue;
        }
        case 29: {
          if (tag !== 237) {
            break;
          }

          message.width = reader.float();
          continue;
        }
        case 30: {
          if (tag !== 245) {
            break;
          }

          message.height = reader.float();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.taxCategory = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 261) {
            break;
          }

          message.taxPercent = reader.float();
          continue;
        }
        case 33: {
          if (tag !== 269) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 34: {
          if (tag !== 277) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.stockAvailability = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.attributes = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.variantAttributes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductInput {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      longDescription: isSet(object.longDescription) ? globalThis.String(object.longDescription) : "",
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
      productType: isSet(object.productType) ? productTypeFromJSON(object.productType) : 0,
      productTemplateId: isSet(object.productTemplateId) ? globalThis.String(object.productTemplateId) : "",
      manufacturerId: isSet(object.manufacturerId) ? globalThis.String(object.manufacturerId) : "",
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : 0,
      metaTitle: isSet(object.metaTitle) ? globalThis.String(object.metaTitle) : "",
      metaDescription: isSet(object.metaDescription) ? globalThis.String(object.metaDescription) : "",
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : "",
      tags: isSet(object.tags) ? globalThis.String(object.tags) : "",
      allowCustomMetaTag: isSet(object.allowCustomMetaTag) ? globalThis.Boolean(object.allowCustomMetaTag) : false,
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : false,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : false,
      status: isSet(object.status) ? productStatusFromJSON(object.status) : 0,
      displayPrice: isSet(object.displayPrice) ? globalThis.Boolean(object.displayPrice) : false,
      shippable: isSet(object.shippable) ? globalThis.Boolean(object.shippable) : false,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      taxCategory: isSet(object.taxCategory) ? globalThis.String(object.taxCategory) : "",
      taxPercent: isSet(object.taxPercent) ? globalThis.Number(object.taxPercent) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
      stockAvailability: isSet(object.stockAvailability) ? globalThis.Number(object.stockAvailability) : 0,
      attributes: isSet(object.attributes) ? globalThis.String(object.attributes) : "",
      variantAttributes: isSet(object.variantAttributes) ? globalThis.String(object.variantAttributes) : "",
    };
  },

  toJSON(message: ProductInput): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== "") {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnailUrl !== "") {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.productType !== 0) {
      obj.productType = productTypeToJSON(message.productType);
    }
    if (message.productTemplateId !== "") {
      obj.productTemplateId = message.productTemplateId;
    }
    if (message.manufacturerId !== "") {
      obj.manufacturerId = message.manufacturerId;
    }
    if (message.sortOrder !== 0) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaTitle !== "") {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== "") {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== "") {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.tags !== "") {
      obj.tags = message.tags;
    }
    if (message.allowCustomMetaTag !== false) {
      obj.allowCustomMetaTag = message.allowCustomMetaTag;
    }
    if (message.limitedToLocations !== false) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== false) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.status !== 0) {
      obj.status = productStatusToJSON(message.status);
    }
    if (message.displayPrice !== false) {
      obj.displayPrice = message.displayPrice;
    }
    if (message.shippable !== false) {
      obj.shippable = message.shippable;
    }
    if (message.weight !== 0) {
      obj.weight = message.weight;
    }
    if (message.length !== 0) {
      obj.length = message.length;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.taxCategory !== "") {
      obj.taxCategory = message.taxCategory;
    }
    if (message.taxPercent !== 0) {
      obj.taxPercent = message.taxPercent;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    if (message.stockAvailability !== 0) {
      obj.stockAvailability = Math.round(message.stockAvailability);
    }
    if (message.attributes !== "") {
      obj.attributes = message.attributes;
    }
    if (message.variantAttributes !== "") {
      obj.variantAttributes = message.variantAttributes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductInput>, I>>(base?: I): ProductInput {
    return ProductInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductInput>, I>>(object: I): ProductInput {
    const message = createBaseProductInput();
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.shortDescription = object.shortDescription ?? "";
    message.longDescription = object.longDescription ?? "";
    message.thumbnailUrl = object.thumbnailUrl ?? "";
    message.productType = object.productType ?? 0;
    message.productTemplateId = object.productTemplateId ?? "";
    message.manufacturerId = object.manufacturerId ?? "";
    message.sortOrder = object.sortOrder ?? 0;
    message.metaTitle = object.metaTitle ?? "";
    message.metaDescription = object.metaDescription ?? "";
    message.metaKeywords = object.metaKeywords ?? "";
    message.tags = object.tags ?? "";
    message.allowCustomMetaTag = object.allowCustomMetaTag ?? false;
    message.limitedToLocations = object.limitedToLocations ?? false;
    message.limitedToStores = object.limitedToStores ?? false;
    message.status = object.status ?? 0;
    message.displayPrice = object.displayPrice ?? false;
    message.shippable = object.shippable ?? false;
    message.weight = object.weight ?? 0;
    message.length = object.length ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.taxCategory = object.taxCategory ?? "";
    message.taxPercent = object.taxPercent ?? 0;
    message.priceExclTax = object.priceExclTax ?? 0;
    message.priceInclTax = object.priceInclTax ?? 0;
    message.unit = object.unit ?? "";
    message.stockAvailability = object.stockAvailability ?? 0;
    message.attributes = object.attributes ?? "";
    message.variantAttributes = object.variantAttributes ?? "";
    return message;
  },
};

function createBaseCreateProductInput(): CreateProductInput {
  return { data: undefined };
}

export const CreateProductInput: MessageFns<CreateProductInput> = {
  encode(message: CreateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductInput {
    return { data: isSet(object.data) ? ProductInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateProductInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductInput>, I>>(base?: I): CreateProductInput {
    return CreateProductInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductInput>, I>>(object: I): CreateProductInput {
    const message = createBaseCreateProductInput();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCreateManyProductsInput(): CreateManyProductsInput {
  return { Products: [] };
}

export const CreateManyProductsInput: MessageFns<CreateManyProductsInput> = {
  encode(message: CreateManyProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Products) {
      ProductInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Products.push(ProductInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyProductsInput {
    return {
      Products: globalThis.Array.isArray(object?.Products)
        ? object.Products.map((e: any) => ProductInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateManyProductsInput): unknown {
    const obj: any = {};
    if (message.Products?.length) {
      obj.Products = message.Products.map((e) => ProductInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateManyProductsInput>, I>>(base?: I): CreateManyProductsInput {
    return CreateManyProductsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateManyProductsInput>, I>>(object: I): CreateManyProductsInput {
    const message = createBaseCreateManyProductsInput();
    message.Products = object.Products?.map((e) => ProductInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateProductInput(): UpdateProductInput {
  return { id: "", data: undefined };
}

export const UpdateProductInput: MessageFns<UpdateProductInput> = {
  encode(message: UpdateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ProductInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? ProductInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateProductInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = ProductInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductInput>, I>>(base?: I): UpdateProductInput {
    return UpdateProductInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductInput>, I>>(object: I): UpdateProductInput {
    const message = createBaseUpdateProductInput();
    message.id = object.id ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateManyProductsInput(): UpdateManyProductsInput {
  return { filter: undefined, update: undefined };
}

export const UpdateManyProductsInput: MessageFns<UpdateManyProductsInput> = {
  encode(message: UpdateManyProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      ProductInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyProductsInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? ProductInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyProductsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = ProductInput.toJSON(message.update);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateManyProductsInput>, I>>(base?: I): UpdateManyProductsInput {
    return UpdateManyProductsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateManyProductsInput>, I>>(object: I): UpdateManyProductsInput {
    const message = createBaseUpdateManyProductsInput();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Any.fromPartial(object.filter)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? ProductInput.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseDeleteManyProductsInput(): DeleteManyProductsInput {
  return { filter: undefined };
}

export const DeleteManyProductsInput: MessageFns<DeleteManyProductsInput> = {
  encode(message: DeleteManyProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyProductsInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyProductsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteManyProductsInput>, I>>(base?: I): DeleteManyProductsInput {
    return DeleteManyProductsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteManyProductsInput>, I>>(object: I): DeleteManyProductsInput {
    const message = createBaseDeleteManyProductsInput();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Any.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseNullableProduct(): NullableProduct {
  return { null: undefined, data: undefined };
}

export const NullableProduct: MessageFns<NullableProduct> = {
  encode(message: NullableProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      Product.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableProduct {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? Product.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableProduct): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = Product.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NullableProduct>, I>>(base?: I): NullableProduct {
    return NullableProduct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NullableProduct>, I>>(object: I): NullableProduct {
    const message = createBaseNullableProduct();
    message.null = object.null ?? undefined;
    message.data = (object.data !== undefined && object.data !== null) ? Product.fromPartial(object.data) : undefined;
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
