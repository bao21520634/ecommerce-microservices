// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "product";

export interface Product {
  id: string;
  name: string;
  brand: string;
  slug: string;
  shortDescription: string;
  longDescription: string;
  thumbnail: string;
  images: string[];
  productType: string;
  manufacturerId: string;
  sortOrder: number;
  metaKeywords: string;
  tags: string[];
  limitedToLocations: boolean;
  limitedToStores: boolean;
  status: string;
  displayPrice: boolean;
  shippable: boolean;
  weight: number;
  length: number;
  width: number;
  height: number;
  taxCategory: string;
  taxPercent: number;
  priceExclTax: number;
  priceInclTax: number;
  unit: string;
  stockAvailability: number;
  attributes: string;
  variantAttributes: string;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface Products {
  products: Product[];
}

export interface ProductInput {
  name: string;
  slug: string;
  brand?: string | undefined;
  shortDescription?: string | undefined;
  longDescription?: string | undefined;
  thumbnail?: string | undefined;
  images: string[];
  productType?: string | undefined;
  manufacturerId?: string | undefined;
  sortOrder?: number | undefined;
  metaKeywords?: string | undefined;
  tags: string[];
  limitedToLocations?: boolean | undefined;
  limitedToStores?: boolean | undefined;
  status?: string | undefined;
  displayPrice?: boolean | undefined;
  shippable?: boolean | undefined;
  weight?: number | undefined;
  length?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  taxCategory?: string | undefined;
  taxPercent?: number | undefined;
  priceExclTax: number;
  priceInclTax: number;
  unit?: string | undefined;
  stockAvailability?: number | undefined;
  attributes?: string | undefined;
  variantAttributes?: string | undefined;
}

export interface CreateProductInput {
  data?: ProductInput | undefined;
}

export interface CreateManyProductsInput {
  Products: ProductInput[];
}

export interface UpdateProductInput {
  id: string;
  data?: ProductInput | undefined;
}

export interface UpdateManyProductsInput {
  filter?: Any | undefined;
  update?: ProductInput | undefined;
}

export interface DeleteManyProductsInput {
  filter?: Any | undefined;
}

export interface NullableProduct {
  null?: NullValue | undefined;
  data?: Product | undefined;
}

export const PRODUCT_PACKAGE_NAME = "product";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseProduct(): Product {
  return {
    id: "",
    name: "",
    brand: "",
    slug: "",
    shortDescription: "",
    longDescription: "",
    thumbnail: "",
    images: [],
    productType: "",
    manufacturerId: "",
    sortOrder: 0,
    metaKeywords: "",
    tags: [],
    limitedToLocations: false,
    limitedToStores: false,
    status: "",
    displayPrice: false,
    shippable: false,
    weight: 0,
    length: 0,
    width: 0,
    height: 0,
    taxCategory: "",
    taxPercent: 0,
    priceExclTax: 0,
    priceInclTax: 0,
    unit: "",
    stockAvailability: 0,
    attributes: "",
    variantAttributes: "",
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.brand !== "") {
      writer.uint32(26).string(message.brand);
    }
    if (message.slug !== "") {
      writer.uint32(34).string(message.slug);
    }
    if (message.shortDescription !== "") {
      writer.uint32(42).string(message.shortDescription);
    }
    if (message.longDescription !== "") {
      writer.uint32(50).string(message.longDescription);
    }
    if (message.thumbnail !== "") {
      writer.uint32(58).string(message.thumbnail);
    }
    for (const v of message.images) {
      writer.uint32(66).string(v!);
    }
    if (message.productType !== "") {
      writer.uint32(74).string(message.productType);
    }
    if (message.manufacturerId !== "") {
      writer.uint32(82).string(message.manufacturerId);
    }
    if (message.sortOrder !== 0) {
      writer.uint32(88).int32(message.sortOrder);
    }
    if (message.metaKeywords !== "") {
      writer.uint32(98).string(message.metaKeywords);
    }
    for (const v of message.tags) {
      writer.uint32(106).string(v!);
    }
    if (message.limitedToLocations !== false) {
      writer.uint32(112).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== false) {
      writer.uint32(120).bool(message.limitedToStores);
    }
    if (message.status !== "") {
      writer.uint32(130).string(message.status);
    }
    if (message.displayPrice !== false) {
      writer.uint32(136).bool(message.displayPrice);
    }
    if (message.shippable !== false) {
      writer.uint32(144).bool(message.shippable);
    }
    if (message.weight !== 0) {
      writer.uint32(157).float(message.weight);
    }
    if (message.length !== 0) {
      writer.uint32(165).float(message.length);
    }
    if (message.width !== 0) {
      writer.uint32(173).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(181).float(message.height);
    }
    if (message.taxCategory !== "") {
      writer.uint32(186).string(message.taxCategory);
    }
    if (message.taxPercent !== 0) {
      writer.uint32(197).float(message.taxPercent);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(205).float(message.priceExclTax);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(213).float(message.priceInclTax);
    }
    if (message.unit !== "") {
      writer.uint32(218).string(message.unit);
    }
    if (message.stockAvailability !== 0) {
      writer.uint32(224).int32(message.stockAvailability);
    }
    if (message.attributes !== "") {
      writer.uint32(234).string(message.attributes);
    }
    if (message.variantAttributes !== "") {
      writer.uint32(242).string(message.variantAttributes);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(250).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(258).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.brand = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.longDescription = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.thumbnail = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.images.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.productType = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.manufacturerId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.displayPrice = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.shippable = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 157) {
            break;
          }

          message.weight = reader.float();
          continue;
        }
        case 20: {
          if (tag !== 165) {
            break;
          }

          message.length = reader.float();
          continue;
        }
        case 21: {
          if (tag !== 173) {
            break;
          }

          message.width = reader.float();
          continue;
        }
        case 22: {
          if (tag !== 181) {
            break;
          }

          message.height = reader.float();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.taxCategory = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 197) {
            break;
          }

          message.taxPercent = reader.float();
          continue;
        }
        case 25: {
          if (tag !== 205) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 26: {
          if (tag !== 213) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.stockAvailability = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.attributes = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.variantAttributes = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      brand: isSet(object.brand) ? globalThis.String(object.brand) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      longDescription: isSet(object.longDescription) ? globalThis.String(object.longDescription) : "",
      thumbnail: isSet(object.thumbnail) ? globalThis.String(object.thumbnail) : "",
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => globalThis.String(e)) : [],
      productType: isSet(object.productType) ? globalThis.String(object.productType) : "",
      manufacturerId: isSet(object.manufacturerId) ? globalThis.String(object.manufacturerId) : "",
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : 0,
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : false,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : false,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      displayPrice: isSet(object.displayPrice) ? globalThis.Boolean(object.displayPrice) : false,
      shippable: isSet(object.shippable) ? globalThis.Boolean(object.shippable) : false,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      taxCategory: isSet(object.taxCategory) ? globalThis.String(object.taxCategory) : "",
      taxPercent: isSet(object.taxPercent) ? globalThis.Number(object.taxPercent) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
      stockAvailability: isSet(object.stockAvailability) ? globalThis.Number(object.stockAvailability) : 0,
      attributes: isSet(object.attributes) ? globalThis.String(object.attributes) : "",
      variantAttributes: isSet(object.variantAttributes) ? globalThis.String(object.variantAttributes) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.brand !== "") {
      obj.brand = message.brand;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== "") {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnail !== "") {
      obj.thumbnail = message.thumbnail;
    }
    if (message.images?.length) {
      obj.images = message.images;
    }
    if (message.productType !== "") {
      obj.productType = message.productType;
    }
    if (message.manufacturerId !== "") {
      obj.manufacturerId = message.manufacturerId;
    }
    if (message.sortOrder !== 0) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaKeywords !== "") {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.limitedToLocations !== false) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== false) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.displayPrice !== false) {
      obj.displayPrice = message.displayPrice;
    }
    if (message.shippable !== false) {
      obj.shippable = message.shippable;
    }
    if (message.weight !== 0) {
      obj.weight = message.weight;
    }
    if (message.length !== 0) {
      obj.length = message.length;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.taxCategory !== "") {
      obj.taxCategory = message.taxCategory;
    }
    if (message.taxPercent !== 0) {
      obj.taxPercent = message.taxPercent;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    if (message.stockAvailability !== 0) {
      obj.stockAvailability = Math.round(message.stockAvailability);
    }
    if (message.attributes !== "") {
      obj.attributes = message.attributes;
    }
    if (message.variantAttributes !== "") {
      obj.variantAttributes = message.variantAttributes;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseProducts(): Products {
  return { products: [] };
}

export const Products: MessageFns<Products> = {
  encode(message: Products, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Products {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProducts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Products {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: Products): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },
};

function createBaseProductInput(): ProductInput {
  return { name: "", slug: "", images: [], tags: [], priceExclTax: 0, priceInclTax: 0 };
}

export const ProductInput: MessageFns<ProductInput> = {
  encode(message: ProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.brand !== undefined) {
      writer.uint32(26).string(message.brand);
    }
    if (message.shortDescription !== undefined) {
      writer.uint32(34).string(message.shortDescription);
    }
    if (message.longDescription !== undefined) {
      writer.uint32(42).string(message.longDescription);
    }
    if (message.thumbnail !== undefined) {
      writer.uint32(50).string(message.thumbnail);
    }
    for (const v of message.images) {
      writer.uint32(58).string(v!);
    }
    if (message.productType !== undefined) {
      writer.uint32(66).string(message.productType);
    }
    if (message.manufacturerId !== undefined) {
      writer.uint32(74).string(message.manufacturerId);
    }
    if (message.sortOrder !== undefined) {
      writer.uint32(80).int32(message.sortOrder);
    }
    if (message.metaKeywords !== undefined) {
      writer.uint32(90).string(message.metaKeywords);
    }
    for (const v of message.tags) {
      writer.uint32(98).string(v!);
    }
    if (message.limitedToLocations !== undefined) {
      writer.uint32(104).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== undefined) {
      writer.uint32(112).bool(message.limitedToStores);
    }
    if (message.status !== undefined) {
      writer.uint32(122).string(message.status);
    }
    if (message.displayPrice !== undefined) {
      writer.uint32(128).bool(message.displayPrice);
    }
    if (message.shippable !== undefined) {
      writer.uint32(136).bool(message.shippable);
    }
    if (message.weight !== undefined) {
      writer.uint32(149).float(message.weight);
    }
    if (message.length !== undefined) {
      writer.uint32(157).float(message.length);
    }
    if (message.width !== undefined) {
      writer.uint32(165).float(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(173).float(message.height);
    }
    if (message.taxCategory !== undefined) {
      writer.uint32(178).string(message.taxCategory);
    }
    if (message.taxPercent !== undefined) {
      writer.uint32(189).float(message.taxPercent);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(197).float(message.priceExclTax);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(205).float(message.priceInclTax);
    }
    if (message.unit !== undefined) {
      writer.uint32(210).string(message.unit);
    }
    if (message.stockAvailability !== undefined) {
      writer.uint32(216).int32(message.stockAvailability);
    }
    if (message.attributes !== undefined) {
      writer.uint32(226).string(message.attributes);
    }
    if (message.variantAttributes !== undefined) {
      writer.uint32(234).string(message.variantAttributes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.brand = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.longDescription = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.thumbnail = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.images.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.productType = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.manufacturerId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.displayPrice = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.shippable = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 149) {
            break;
          }

          message.weight = reader.float();
          continue;
        }
        case 19: {
          if (tag !== 157) {
            break;
          }

          message.length = reader.float();
          continue;
        }
        case 20: {
          if (tag !== 165) {
            break;
          }

          message.width = reader.float();
          continue;
        }
        case 21: {
          if (tag !== 173) {
            break;
          }

          message.height = reader.float();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.taxCategory = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 189) {
            break;
          }

          message.taxPercent = reader.float();
          continue;
        }
        case 24: {
          if (tag !== 197) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 25: {
          if (tag !== 205) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.stockAvailability = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.attributes = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.variantAttributes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductInput {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : undefined,
      longDescription: isSet(object.longDescription) ? globalThis.String(object.longDescription) : undefined,
      thumbnail: isSet(object.thumbnail) ? globalThis.String(object.thumbnail) : undefined,
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => globalThis.String(e)) : [],
      productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
      manufacturerId: isSet(object.manufacturerId) ? globalThis.String(object.manufacturerId) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : undefined,
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : undefined,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : undefined,
      displayPrice: isSet(object.displayPrice) ? globalThis.Boolean(object.displayPrice) : undefined,
      shippable: isSet(object.shippable) ? globalThis.Boolean(object.shippable) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      length: isSet(object.length) ? globalThis.Number(object.length) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      taxCategory: isSet(object.taxCategory) ? globalThis.String(object.taxCategory) : undefined,
      taxPercent: isSet(object.taxPercent) ? globalThis.Number(object.taxPercent) : undefined,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : undefined,
      stockAvailability: isSet(object.stockAvailability) ? globalThis.Number(object.stockAvailability) : undefined,
      attributes: isSet(object.attributes) ? globalThis.String(object.attributes) : undefined,
      variantAttributes: isSet(object.variantAttributes) ? globalThis.String(object.variantAttributes) : undefined,
    };
  },

  toJSON(message: ProductInput): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.shortDescription !== undefined) {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== undefined) {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnail !== undefined) {
      obj.thumbnail = message.thumbnail;
    }
    if (message.images?.length) {
      obj.images = message.images;
    }
    if (message.productType !== undefined) {
      obj.productType = message.productType;
    }
    if (message.manufacturerId !== undefined) {
      obj.manufacturerId = message.manufacturerId;
    }
    if (message.sortOrder !== undefined) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaKeywords !== undefined) {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.limitedToLocations !== undefined) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== undefined) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.displayPrice !== undefined) {
      obj.displayPrice = message.displayPrice;
    }
    if (message.shippable !== undefined) {
      obj.shippable = message.shippable;
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    if (message.length !== undefined) {
      obj.length = message.length;
    }
    if (message.width !== undefined) {
      obj.width = message.width;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.taxCategory !== undefined) {
      obj.taxCategory = message.taxCategory;
    }
    if (message.taxPercent !== undefined) {
      obj.taxPercent = message.taxPercent;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.unit !== undefined) {
      obj.unit = message.unit;
    }
    if (message.stockAvailability !== undefined) {
      obj.stockAvailability = Math.round(message.stockAvailability);
    }
    if (message.attributes !== undefined) {
      obj.attributes = message.attributes;
    }
    if (message.variantAttributes !== undefined) {
      obj.variantAttributes = message.variantAttributes;
    }
    return obj;
  },
};

function createBaseCreateProductInput(): CreateProductInput {
  return {};
}

export const CreateProductInput: MessageFns<CreateProductInput> = {
  encode(message: CreateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductInput {
    return { data: isSet(object.data) ? ProductInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateProductInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseCreateManyProductsInput(): CreateManyProductsInput {
  return { Products: [] };
}

export const CreateManyProductsInput: MessageFns<CreateManyProductsInput> = {
  encode(message: CreateManyProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Products) {
      ProductInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Products.push(ProductInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyProductsInput {
    return {
      Products: globalThis.Array.isArray(object?.Products)
        ? object.Products.map((e: any) => ProductInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateManyProductsInput): unknown {
    const obj: any = {};
    if (message.Products?.length) {
      obj.Products = message.Products.map((e) => ProductInput.toJSON(e));
    }
    return obj;
  },
};

function createBaseUpdateProductInput(): UpdateProductInput {
  return { id: "" };
}

export const UpdateProductInput: MessageFns<UpdateProductInput> = {
  encode(message: UpdateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ProductInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? ProductInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateProductInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = ProductInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseUpdateManyProductsInput(): UpdateManyProductsInput {
  return {};
}

export const UpdateManyProductsInput: MessageFns<UpdateManyProductsInput> = {
  encode(message: UpdateManyProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      ProductInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyProductsInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? ProductInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyProductsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = ProductInput.toJSON(message.update);
    }
    return obj;
  },
};

function createBaseDeleteManyProductsInput(): DeleteManyProductsInput {
  return {};
}

export const DeleteManyProductsInput: MessageFns<DeleteManyProductsInput> = {
  encode(message: DeleteManyProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyProductsInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyProductsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },
};

function createBaseNullableProduct(): NullableProduct {
  return {};
}

export const NullableProduct: MessageFns<NullableProduct> = {
  encode(message: NullableProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      Product.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableProduct {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? Product.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableProduct): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = Product.toJSON(message.data);
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
