// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: orderItem.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageInfo } from "./common";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";
import { StringValue } from "./google/protobuf/wrappers";

export const protobufPackage = "orderItem";

export interface OrderItem {
  id: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
  createdBy: string | undefined;
  updatedBy: string | undefined;
  deletedBy: string | undefined;
  productVariantId: string;
  orderId: string;
  displayName: string;
  priceInclTax: number;
  priceExclTax: number;
  quantity: number;
  subTotal: number;
  discount: number;
  tax: number;
  total: number;
}

export interface OrderItems {
  orderItems: OrderItem[];
}

export interface OrderItemEdge {
  node: OrderItems | undefined;
  cursor: string;
}

export interface OrderItemConnection {
  pageInfo: PageInfo | undefined;
  totalCount: number;
  edges: OrderItemEdge[];
}

export interface OrderItemInput {
  productVariantId: string;
  orderId: string;
  displayName: string;
  priceInclTax: number;
  priceExclTax: number;
  quantity: number;
  subTotal: number;
  discount: number;
  tax: number;
  total: number;
}

export interface CreateOrderItemInput {
  data: OrderItemInput | undefined;
}

export interface CreateManyOrderItemsInput {
  orderInputs: OrderItemInput[];
}

export interface UpdateOrderItemInput {
  id: string;
  data: OrderItemInput | undefined;
}

export interface UpdateManyOrderItemsInput {
  filter: Any | undefined;
  update: OrderItemInput | undefined;
}

export interface DeleteManyOrderItemsInput {
  filter: Any | undefined;
}

export interface NullableOrderItem {
  null?: NullValue | undefined;
  data?: OrderItem | undefined;
}

function createBaseOrderItem(): OrderItem {
  return {
    id: "",
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    createdBy: undefined,
    updatedBy: undefined,
    deletedBy: undefined,
    productVariantId: "",
    orderId: "",
    displayName: "",
    priceInclTax: 0,
    priceExclTax: 0,
    quantity: 0,
    subTotal: 0,
    discount: 0,
    tax: 0,
    total: 0,
  };
}

export const OrderItem: MessageFns<OrderItem> = {
  encode(message: OrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(34).fork()).join();
    }
    if (message.createdBy !== undefined) {
      StringValue.encode({ value: message.createdBy! }, writer.uint32(42).fork()).join();
    }
    if (message.updatedBy !== undefined) {
      StringValue.encode({ value: message.updatedBy! }, writer.uint32(50).fork()).join();
    }
    if (message.deletedBy !== undefined) {
      StringValue.encode({ value: message.deletedBy! }, writer.uint32(58).fork()).join();
    }
    if (message.productVariantId !== "") {
      writer.uint32(66).string(message.productVariantId);
    }
    if (message.orderId !== "") {
      writer.uint32(74).string(message.orderId);
    }
    if (message.displayName !== "") {
      writer.uint32(82).string(message.displayName);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(93).float(message.priceInclTax);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(101).float(message.priceExclTax);
    }
    if (message.quantity !== 0) {
      writer.uint32(104).int32(message.quantity);
    }
    if (message.subTotal !== 0) {
      writer.uint32(117).float(message.subTotal);
    }
    if (message.discount !== 0) {
      writer.uint32(125).float(message.discount);
    }
    if (message.tax !== 0) {
      writer.uint32(133).float(message.tax);
    }
    if (message.total !== 0) {
      writer.uint32(141).float(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.productVariantId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 101) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 117) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 15: {
          if (tag !== 125) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 16: {
          if (tag !== 133) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 17: {
          if (tag !== 141) {
            break;
          }

          message.total = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      createdBy: isSet(object.createdBy) ? String(object.createdBy) : undefined,
      updatedBy: isSet(object.updatedBy) ? String(object.updatedBy) : undefined,
      deletedBy: isSet(object.deletedBy) ? String(object.deletedBy) : undefined,
      productVariantId: isSet(object.productVariantId) ? globalThis.String(object.productVariantId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = message.createdBy;
    }
    if (message.updatedBy !== undefined) {
      obj.updatedBy = message.updatedBy;
    }
    if (message.deletedBy !== undefined) {
      obj.deletedBy = message.deletedBy;
    }
    if (message.productVariantId !== "") {
      obj.productVariantId = message.productVariantId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItem>, I>>(base?: I): OrderItem {
    return OrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItem>, I>>(object: I): OrderItem {
    const message = createBaseOrderItem();
    message.id = object.id ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.updatedBy = object.updatedBy ?? undefined;
    message.deletedBy = object.deletedBy ?? undefined;
    message.productVariantId = object.productVariantId ?? "";
    message.orderId = object.orderId ?? "";
    message.displayName = object.displayName ?? "";
    message.priceInclTax = object.priceInclTax ?? 0;
    message.priceExclTax = object.priceExclTax ?? 0;
    message.quantity = object.quantity ?? 0;
    message.subTotal = object.subTotal ?? 0;
    message.discount = object.discount ?? 0;
    message.tax = object.tax ?? 0;
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseOrderItems(): OrderItems {
  return { orderItems: [] };
}

export const OrderItems: MessageFns<OrderItems> = {
  encode(message: OrderItems, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orderItems) {
      OrderItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItems {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItems();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderItems.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItems {
    return {
      orderItems: globalThis.Array.isArray(object?.orderItems)
        ? object.orderItems.map((e: any) => OrderItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrderItems): unknown {
    const obj: any = {};
    if (message.orderItems?.length) {
      obj.orderItems = message.orderItems.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItems>, I>>(base?: I): OrderItems {
    return OrderItems.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItems>, I>>(object: I): OrderItems {
    const message = createBaseOrderItems();
    message.orderItems = object.orderItems?.map((e) => OrderItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOrderItemEdge(): OrderItemEdge {
  return { node: undefined, cursor: "" };
}

export const OrderItemEdge: MessageFns<OrderItemEdge> = {
  encode(message: OrderItemEdge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      OrderItems.encode(message.node, writer.uint32(10).fork()).join();
    }
    if (message.cursor !== "") {
      writer.uint32(18).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItemEdge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItemEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = OrderItems.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItemEdge {
    return {
      node: isSet(object.node) ? OrderItems.fromJSON(object.node) : undefined,
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
    };
  },

  toJSON(message: OrderItemEdge): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = OrderItems.toJSON(message.node);
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItemEdge>, I>>(base?: I): OrderItemEdge {
    return OrderItemEdge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItemEdge>, I>>(object: I): OrderItemEdge {
    const message = createBaseOrderItemEdge();
    message.node = (object.node !== undefined && object.node !== null)
      ? OrderItems.fromPartial(object.node)
      : undefined;
    message.cursor = object.cursor ?? "";
    return message;
  },
};

function createBaseOrderItemConnection(): OrderItemConnection {
  return { pageInfo: undefined, totalCount: 0, edges: [] };
}

export const OrderItemConnection: MessageFns<OrderItemConnection> = {
  encode(message: OrderItemConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageInfo !== undefined) {
      PageInfo.encode(message.pageInfo, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    for (const v of message.edges) {
      OrderItemEdge.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItemConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItemConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageInfo = PageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.edges.push(OrderItemEdge.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItemConnection {
    return {
      pageInfo: isSet(object.pageInfo) ? PageInfo.fromJSON(object.pageInfo) : undefined,
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => OrderItemEdge.fromJSON(e)) : [],
    };
  },

  toJSON(message: OrderItemConnection): unknown {
    const obj: any = {};
    if (message.pageInfo !== undefined) {
      obj.pageInfo = PageInfo.toJSON(message.pageInfo);
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => OrderItemEdge.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItemConnection>, I>>(base?: I): OrderItemConnection {
    return OrderItemConnection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItemConnection>, I>>(object: I): OrderItemConnection {
    const message = createBaseOrderItemConnection();
    message.pageInfo = (object.pageInfo !== undefined && object.pageInfo !== null)
      ? PageInfo.fromPartial(object.pageInfo)
      : undefined;
    message.totalCount = object.totalCount ?? 0;
    message.edges = object.edges?.map((e) => OrderItemEdge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOrderItemInput(): OrderItemInput {
  return {
    productVariantId: "",
    orderId: "",
    displayName: "",
    priceInclTax: 0,
    priceExclTax: 0,
    quantity: 0,
    subTotal: 0,
    discount: 0,
    tax: 0,
    total: 0,
  };
}

export const OrderItemInput: MessageFns<OrderItemInput> = {
  encode(message: OrderItemInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productVariantId !== "") {
      writer.uint32(10).string(message.productVariantId);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(37).float(message.priceInclTax);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(45).float(message.priceExclTax);
    }
    if (message.quantity !== 0) {
      writer.uint32(48).int32(message.quantity);
    }
    if (message.subTotal !== 0) {
      writer.uint32(61).float(message.subTotal);
    }
    if (message.discount !== 0) {
      writer.uint32(69).float(message.discount);
    }
    if (message.tax !== 0) {
      writer.uint32(77).float(message.tax);
    }
    if (message.total !== 0) {
      writer.uint32(85).float(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItemInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItemInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productVariantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.total = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItemInput {
    return {
      productVariantId: isSet(object.productVariantId) ? globalThis.String(object.productVariantId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: OrderItemInput): unknown {
    const obj: any = {};
    if (message.productVariantId !== "") {
      obj.productVariantId = message.productVariantId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItemInput>, I>>(base?: I): OrderItemInput {
    return OrderItemInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItemInput>, I>>(object: I): OrderItemInput {
    const message = createBaseOrderItemInput();
    message.productVariantId = object.productVariantId ?? "";
    message.orderId = object.orderId ?? "";
    message.displayName = object.displayName ?? "";
    message.priceInclTax = object.priceInclTax ?? 0;
    message.priceExclTax = object.priceExclTax ?? 0;
    message.quantity = object.quantity ?? 0;
    message.subTotal = object.subTotal ?? 0;
    message.discount = object.discount ?? 0;
    message.tax = object.tax ?? 0;
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseCreateOrderItemInput(): CreateOrderItemInput {
  return { data: undefined };
}

export const CreateOrderItemInput: MessageFns<CreateOrderItemInput> = {
  encode(message: CreateOrderItemInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      OrderItemInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderItemInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderItemInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = OrderItemInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderItemInput {
    return { data: isSet(object.data) ? OrderItemInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateOrderItemInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = OrderItemInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderItemInput>, I>>(base?: I): CreateOrderItemInput {
    return CreateOrderItemInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderItemInput>, I>>(object: I): CreateOrderItemInput {
    const message = createBaseCreateOrderItemInput();
    message.data = (object.data !== undefined && object.data !== null)
      ? OrderItemInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCreateManyOrderItemsInput(): CreateManyOrderItemsInput {
  return { orderInputs: [] };
}

export const CreateManyOrderItemsInput: MessageFns<CreateManyOrderItemsInput> = {
  encode(message: CreateManyOrderItemsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orderInputs) {
      OrderItemInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyOrderItemsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyOrderItemsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderInputs.push(OrderItemInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyOrderItemsInput {
    return {
      orderInputs: globalThis.Array.isArray(object?.orderInputs)
        ? object.orderInputs.map((e: any) => OrderItemInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateManyOrderItemsInput): unknown {
    const obj: any = {};
    if (message.orderInputs?.length) {
      obj.orderInputs = message.orderInputs.map((e) => OrderItemInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateManyOrderItemsInput>, I>>(base?: I): CreateManyOrderItemsInput {
    return CreateManyOrderItemsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateManyOrderItemsInput>, I>>(object: I): CreateManyOrderItemsInput {
    const message = createBaseCreateManyOrderItemsInput();
    message.orderInputs = object.orderInputs?.map((e) => OrderItemInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateOrderItemInput(): UpdateOrderItemInput {
  return { id: "", data: undefined };
}

export const UpdateOrderItemInput: MessageFns<UpdateOrderItemInput> = {
  encode(message: UpdateOrderItemInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      OrderItemInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderItemInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderItemInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderItemInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderItemInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? OrderItemInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateOrderItemInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = OrderItemInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderItemInput>, I>>(base?: I): UpdateOrderItemInput {
    return UpdateOrderItemInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderItemInput>, I>>(object: I): UpdateOrderItemInput {
    const message = createBaseUpdateOrderItemInput();
    message.id = object.id ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? OrderItemInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateManyOrderItemsInput(): UpdateManyOrderItemsInput {
  return { filter: undefined, update: undefined };
}

export const UpdateManyOrderItemsInput: MessageFns<UpdateManyOrderItemsInput> = {
  encode(message: UpdateManyOrderItemsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      OrderItemInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyOrderItemsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyOrderItemsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = OrderItemInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyOrderItemsInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? OrderItemInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyOrderItemsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = OrderItemInput.toJSON(message.update);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateManyOrderItemsInput>, I>>(base?: I): UpdateManyOrderItemsInput {
    return UpdateManyOrderItemsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateManyOrderItemsInput>, I>>(object: I): UpdateManyOrderItemsInput {
    const message = createBaseUpdateManyOrderItemsInput();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Any.fromPartial(object.filter)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? OrderItemInput.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseDeleteManyOrderItemsInput(): DeleteManyOrderItemsInput {
  return { filter: undefined };
}

export const DeleteManyOrderItemsInput: MessageFns<DeleteManyOrderItemsInput> = {
  encode(message: DeleteManyOrderItemsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyOrderItemsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyOrderItemsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyOrderItemsInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyOrderItemsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteManyOrderItemsInput>, I>>(base?: I): DeleteManyOrderItemsInput {
    return DeleteManyOrderItemsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteManyOrderItemsInput>, I>>(object: I): DeleteManyOrderItemsInput {
    const message = createBaseDeleteManyOrderItemsInput();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Any.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseNullableOrderItem(): NullableOrderItem {
  return { null: undefined, data: undefined };
}

export const NullableOrderItem: MessageFns<NullableOrderItem> = {
  encode(message: NullableOrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      OrderItem.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableOrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableOrderItem {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? OrderItem.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableOrderItem): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = OrderItem.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NullableOrderItem>, I>>(base?: I): NullableOrderItem {
    return NullableOrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NullableOrderItem>, I>>(object: I): NullableOrderItem {
    const message = createBaseNullableOrderItem();
    message.null = object.null ?? undefined;
    message.data = (object.data !== undefined && object.data !== null) ? OrderItem.fromPartial(object.data) : undefined;
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
