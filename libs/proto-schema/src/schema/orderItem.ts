// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: orderItem.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "orderItem";

export interface OrderItem {
  id: string;
  productVariantId: string;
  orderId: string;
  displayName: string;
  priceInclTax: number;
  priceExclTax: number;
  quantity: number;
  subTotal: number;
  discount: number;
  tax: number;
  total: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface OrderItems {
  orderItems: OrderItem[];
}

export interface OrderItemInput {
  productVariantId: string;
  orderId: string;
  displayName: string;
  priceInclTax: number;
  priceExclTax: number;
  quantity: number;
  subTotal: number;
  discount?: number | undefined;
  tax?: number | undefined;
  total: number;
}

export interface CreateOrderItemInput {
  data?: OrderItemInput | undefined;
}

export interface CreateManyOrderItemsInput {
  orderInputs: OrderItemInput[];
}

export interface UpdateOrderItemInput {
  id: string;
  data?: OrderItemInput | undefined;
}

export interface UpdateManyOrderItemsInput {
  filter?: Any | undefined;
  update?: OrderItemInput | undefined;
}

export interface DeleteManyOrderItemsInput {
  filter?: Any | undefined;
}

export interface NullableOrderItem {
  null?: NullValue | undefined;
  data?: OrderItem | undefined;
}

export const ORDER_ITEM_PACKAGE_NAME = "orderItem";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseOrderItem(): OrderItem {
  return {
    id: "",
    productVariantId: "",
    orderId: "",
    displayName: "",
    priceInclTax: 0,
    priceExclTax: 0,
    quantity: 0,
    subTotal: 0,
    discount: 0,
    tax: 0,
    total: 0,
  };
}

export const OrderItem: MessageFns<OrderItem> = {
  encode(message: OrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.productVariantId !== "") {
      writer.uint32(18).string(message.productVariantId);
    }
    if (message.orderId !== "") {
      writer.uint32(26).string(message.orderId);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(45).float(message.priceInclTax);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(53).float(message.priceExclTax);
    }
    if (message.quantity !== 0) {
      writer.uint32(56).int32(message.quantity);
    }
    if (message.subTotal !== 0) {
      writer.uint32(69).float(message.subTotal);
    }
    if (message.discount !== 0) {
      writer.uint32(77).float(message.discount);
    }
    if (message.tax !== 0) {
      writer.uint32(85).float(message.tax);
    }
    if (message.total !== 0) {
      writer.uint32(93).float(message.total);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(98).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productVariantId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.total = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      productVariantId: isSet(object.productVariantId) ? globalThis.String(object.productVariantId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.productVariantId !== "") {
      obj.productVariantId = message.productVariantId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseOrderItems(): OrderItems {
  return { orderItems: [] };
}

export const OrderItems: MessageFns<OrderItems> = {
  encode(message: OrderItems, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orderItems) {
      OrderItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItems {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItems();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderItems.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItems {
    return {
      orderItems: globalThis.Array.isArray(object?.orderItems)
        ? object.orderItems.map((e: any) => OrderItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrderItems): unknown {
    const obj: any = {};
    if (message.orderItems?.length) {
      obj.orderItems = message.orderItems.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },
};

function createBaseOrderItemInput(): OrderItemInput {
  return {
    productVariantId: "",
    orderId: "",
    displayName: "",
    priceInclTax: 0,
    priceExclTax: 0,
    quantity: 0,
    subTotal: 0,
    total: 0,
  };
}

export const OrderItemInput: MessageFns<OrderItemInput> = {
  encode(message: OrderItemInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productVariantId !== "") {
      writer.uint32(10).string(message.productVariantId);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.priceInclTax !== 0) {
      writer.uint32(37).float(message.priceInclTax);
    }
    if (message.priceExclTax !== 0) {
      writer.uint32(45).float(message.priceExclTax);
    }
    if (message.quantity !== 0) {
      writer.uint32(48).int32(message.quantity);
    }
    if (message.subTotal !== 0) {
      writer.uint32(61).float(message.subTotal);
    }
    if (message.discount !== undefined) {
      writer.uint32(69).float(message.discount);
    }
    if (message.tax !== undefined) {
      writer.uint32(77).float(message.tax);
    }
    if (message.total !== 0) {
      writer.uint32(85).float(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItemInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItemInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productVariantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.priceInclTax = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.priceExclTax = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.total = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItemInput {
    return {
      productVariantId: isSet(object.productVariantId) ? globalThis.String(object.productVariantId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      priceInclTax: isSet(object.priceInclTax) ? globalThis.Number(object.priceInclTax) : 0,
      priceExclTax: isSet(object.priceExclTax) ? globalThis.Number(object.priceExclTax) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : undefined,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : undefined,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: OrderItemInput): unknown {
    const obj: any = {};
    if (message.productVariantId !== "") {
      obj.productVariantId = message.productVariantId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.priceInclTax !== 0) {
      obj.priceInclTax = message.priceInclTax;
    }
    if (message.priceExclTax !== 0) {
      obj.priceExclTax = message.priceExclTax;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.discount !== undefined) {
      obj.discount = message.discount;
    }
    if (message.tax !== undefined) {
      obj.tax = message.tax;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    return obj;
  },
};

function createBaseCreateOrderItemInput(): CreateOrderItemInput {
  return {};
}

export const CreateOrderItemInput: MessageFns<CreateOrderItemInput> = {
  encode(message: CreateOrderItemInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      OrderItemInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderItemInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderItemInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = OrderItemInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderItemInput {
    return { data: isSet(object.data) ? OrderItemInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateOrderItemInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = OrderItemInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseCreateManyOrderItemsInput(): CreateManyOrderItemsInput {
  return { orderInputs: [] };
}

export const CreateManyOrderItemsInput: MessageFns<CreateManyOrderItemsInput> = {
  encode(message: CreateManyOrderItemsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orderInputs) {
      OrderItemInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyOrderItemsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyOrderItemsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderInputs.push(OrderItemInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyOrderItemsInput {
    return {
      orderInputs: globalThis.Array.isArray(object?.orderInputs)
        ? object.orderInputs.map((e: any) => OrderItemInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateManyOrderItemsInput): unknown {
    const obj: any = {};
    if (message.orderInputs?.length) {
      obj.orderInputs = message.orderInputs.map((e) => OrderItemInput.toJSON(e));
    }
    return obj;
  },
};

function createBaseUpdateOrderItemInput(): UpdateOrderItemInput {
  return { id: "" };
}

export const UpdateOrderItemInput: MessageFns<UpdateOrderItemInput> = {
  encode(message: UpdateOrderItemInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      OrderItemInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderItemInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderItemInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderItemInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderItemInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? OrderItemInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateOrderItemInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = OrderItemInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseUpdateManyOrderItemsInput(): UpdateManyOrderItemsInput {
  return {};
}

export const UpdateManyOrderItemsInput: MessageFns<UpdateManyOrderItemsInput> = {
  encode(message: UpdateManyOrderItemsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      OrderItemInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyOrderItemsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyOrderItemsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = OrderItemInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyOrderItemsInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? OrderItemInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyOrderItemsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = OrderItemInput.toJSON(message.update);
    }
    return obj;
  },
};

function createBaseDeleteManyOrderItemsInput(): DeleteManyOrderItemsInput {
  return {};
}

export const DeleteManyOrderItemsInput: MessageFns<DeleteManyOrderItemsInput> = {
  encode(message: DeleteManyOrderItemsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyOrderItemsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyOrderItemsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyOrderItemsInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyOrderItemsInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },
};

function createBaseNullableOrderItem(): NullableOrderItem {
  return {};
}

export const NullableOrderItem: MessageFns<NullableOrderItem> = {
  encode(message: NullableOrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      OrderItem.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableOrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableOrderItem {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? OrderItem.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableOrderItem): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = OrderItem.toJSON(message.data);
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
