// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: checkout.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ChargeResponse, PaymentMethod, paymentMethodFromJSON, paymentMethodToJSON } from "./charge";
import { Order } from "./order";

export const protobufPackage = "checkout";

export enum CheckoutStatus {
  Initiated = 0,
  Processing = 1,
  Completed = 2,
  Failed = 3,
  Cancelled = 4,
  UNRECOGNIZED = -1,
}

export function checkoutStatusFromJSON(object: any): CheckoutStatus {
  switch (object) {
    case 0:
    case "Initiated":
      return CheckoutStatus.Initiated;
    case 1:
    case "Processing":
      return CheckoutStatus.Processing;
    case 2:
    case "Completed":
      return CheckoutStatus.Completed;
    case 3:
    case "Failed":
      return CheckoutStatus.Failed;
    case 4:
    case "Cancelled":
      return CheckoutStatus.Cancelled;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CheckoutStatus.UNRECOGNIZED;
  }
}

export function checkoutStatusToJSON(object: CheckoutStatus): string {
  switch (object) {
    case CheckoutStatus.Initiated:
      return "Initiated";
    case CheckoutStatus.Processing:
      return "Processing";
    case CheckoutStatus.Completed:
      return "Completed";
    case CheckoutStatus.Failed:
      return "Failed";
    case CheckoutStatus.Cancelled:
      return "Cancelled";
    case CheckoutStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CheckoutItem {
  productId: string;
  name: string;
  unitPrice: number;
  quantity: number;
  totalPrice: number;
}

export interface CheckoutRequest {
  customerId: string;
  items: CheckoutItem[];
  subTotal: number;
  tax: number;
  discount: number;
  total: number;
  paymentMethod: PaymentMethod;
}

export interface CheckoutResponse {
  checkoutId: string;
  status: CheckoutStatus;
  order: Order | undefined;
  chargeResponse: ChargeResponse | undefined;
}

export interface PlaceOrderRequest {
  checkout: CheckoutRequest | undefined;
  shippingAddressId: string;
}

export interface PlaceOrderResponse {
  orderId: string;
  order: Order | undefined;
  chargeResponse: ChargeResponse | undefined;
}

export interface CancelCheckoutRequest {
  checkoutId: string;
}

function createBaseCheckoutItem(): CheckoutItem {
  return { productId: "", name: "", unitPrice: 0, quantity: 0, totalPrice: 0 };
}

export const CheckoutItem: MessageFns<CheckoutItem> = {
  encode(message: CheckoutItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.unitPrice !== 0) {
      writer.uint32(29).float(message.unitPrice);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    if (message.totalPrice !== 0) {
      writer.uint32(45).float(message.totalPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckoutItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckoutItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.totalPrice = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckoutItem {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      totalPrice: isSet(object.totalPrice) ? globalThis.Number(object.totalPrice) : 0,
    };
  },

  toJSON(message: CheckoutItem): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.unitPrice !== 0) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.totalPrice !== 0) {
      obj.totalPrice = message.totalPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckoutItem>, I>>(base?: I): CheckoutItem {
    return CheckoutItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckoutItem>, I>>(object: I): CheckoutItem {
    const message = createBaseCheckoutItem();
    message.productId = object.productId ?? "";
    message.name = object.name ?? "";
    message.unitPrice = object.unitPrice ?? 0;
    message.quantity = object.quantity ?? 0;
    message.totalPrice = object.totalPrice ?? 0;
    return message;
  },
};

function createBaseCheckoutRequest(): CheckoutRequest {
  return { customerId: "", items: [], subTotal: 0, tax: 0, discount: 0, total: 0, paymentMethod: 0 };
}

export const CheckoutRequest: MessageFns<CheckoutRequest> = {
  encode(message: CheckoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.items) {
      CheckoutItem.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.subTotal !== 0) {
      writer.uint32(29).float(message.subTotal);
    }
    if (message.tax !== 0) {
      writer.uint32(37).float(message.tax);
    }
    if (message.discount !== 0) {
      writer.uint32(45).float(message.discount);
    }
    if (message.total !== 0) {
      writer.uint32(53).float(message.total);
    }
    if (message.paymentMethod !== 0) {
      writer.uint32(56).int32(message.paymentMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.items.push(CheckoutItem.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.subTotal = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.tax = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.discount = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.total = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.paymentMethod = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckoutRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => CheckoutItem.fromJSON(e)) : [],
      subTotal: isSet(object.subTotal) ? globalThis.Number(object.subTotal) : 0,
      tax: isSet(object.tax) ? globalThis.Number(object.tax) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      paymentMethod: isSet(object.paymentMethod) ? paymentMethodFromJSON(object.paymentMethod) : 0,
    };
  },

  toJSON(message: CheckoutRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => CheckoutItem.toJSON(e));
    }
    if (message.subTotal !== 0) {
      obj.subTotal = message.subTotal;
    }
    if (message.tax !== 0) {
      obj.tax = message.tax;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.paymentMethod !== 0) {
      obj.paymentMethod = paymentMethodToJSON(message.paymentMethod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckoutRequest>, I>>(base?: I): CheckoutRequest {
    return CheckoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckoutRequest>, I>>(object: I): CheckoutRequest {
    const message = createBaseCheckoutRequest();
    message.customerId = object.customerId ?? "";
    message.items = object.items?.map((e) => CheckoutItem.fromPartial(e)) || [];
    message.subTotal = object.subTotal ?? 0;
    message.tax = object.tax ?? 0;
    message.discount = object.discount ?? 0;
    message.total = object.total ?? 0;
    message.paymentMethod = object.paymentMethod ?? 0;
    return message;
  },
};

function createBaseCheckoutResponse(): CheckoutResponse {
  return { checkoutId: "", status: 0, order: undefined, chargeResponse: undefined };
}

export const CheckoutResponse: MessageFns<CheckoutResponse> = {
  encode(message: CheckoutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checkoutId !== "") {
      writer.uint32(10).string(message.checkoutId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(26).fork()).join();
    }
    if (message.chargeResponse !== undefined) {
      ChargeResponse.encode(message.chargeResponse, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckoutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.checkoutId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chargeResponse = ChargeResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckoutResponse {
    return {
      checkoutId: isSet(object.checkoutId) ? globalThis.String(object.checkoutId) : "",
      status: isSet(object.status) ? checkoutStatusFromJSON(object.status) : 0,
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      chargeResponse: isSet(object.chargeResponse) ? ChargeResponse.fromJSON(object.chargeResponse) : undefined,
    };
  },

  toJSON(message: CheckoutResponse): unknown {
    const obj: any = {};
    if (message.checkoutId !== "") {
      obj.checkoutId = message.checkoutId;
    }
    if (message.status !== 0) {
      obj.status = checkoutStatusToJSON(message.status);
    }
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.chargeResponse !== undefined) {
      obj.chargeResponse = ChargeResponse.toJSON(message.chargeResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckoutResponse>, I>>(base?: I): CheckoutResponse {
    return CheckoutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckoutResponse>, I>>(object: I): CheckoutResponse {
    const message = createBaseCheckoutResponse();
    message.checkoutId = object.checkoutId ?? "";
    message.status = object.status ?? 0;
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.chargeResponse = (object.chargeResponse !== undefined && object.chargeResponse !== null)
      ? ChargeResponse.fromPartial(object.chargeResponse)
      : undefined;
    return message;
  },
};

function createBasePlaceOrderRequest(): PlaceOrderRequest {
  return { checkout: undefined, shippingAddressId: "" };
}

export const PlaceOrderRequest: MessageFns<PlaceOrderRequest> = {
  encode(message: PlaceOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checkout !== undefined) {
      CheckoutRequest.encode(message.checkout, writer.uint32(10).fork()).join();
    }
    if (message.shippingAddressId !== "") {
      writer.uint32(18).string(message.shippingAddressId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.checkout = CheckoutRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shippingAddressId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceOrderRequest {
    return {
      checkout: isSet(object.checkout) ? CheckoutRequest.fromJSON(object.checkout) : undefined,
      shippingAddressId: isSet(object.shippingAddressId) ? globalThis.String(object.shippingAddressId) : "",
    };
  },

  toJSON(message: PlaceOrderRequest): unknown {
    const obj: any = {};
    if (message.checkout !== undefined) {
      obj.checkout = CheckoutRequest.toJSON(message.checkout);
    }
    if (message.shippingAddressId !== "") {
      obj.shippingAddressId = message.shippingAddressId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceOrderRequest>, I>>(base?: I): PlaceOrderRequest {
    return PlaceOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceOrderRequest>, I>>(object: I): PlaceOrderRequest {
    const message = createBasePlaceOrderRequest();
    message.checkout = (object.checkout !== undefined && object.checkout !== null)
      ? CheckoutRequest.fromPartial(object.checkout)
      : undefined;
    message.shippingAddressId = object.shippingAddressId ?? "";
    return message;
  },
};

function createBasePlaceOrderResponse(): PlaceOrderResponse {
  return { orderId: "", order: undefined, chargeResponse: undefined };
}

export const PlaceOrderResponse: MessageFns<PlaceOrderResponse> = {
  encode(message: PlaceOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(18).fork()).join();
    }
    if (message.chargeResponse !== undefined) {
      ChargeResponse.encode(message.chargeResponse, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chargeResponse = ChargeResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceOrderResponse {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      chargeResponse: isSet(object.chargeResponse) ? ChargeResponse.fromJSON(object.chargeResponse) : undefined,
    };
  },

  toJSON(message: PlaceOrderResponse): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.chargeResponse !== undefined) {
      obj.chargeResponse = ChargeResponse.toJSON(message.chargeResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceOrderResponse>, I>>(base?: I): PlaceOrderResponse {
    return PlaceOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceOrderResponse>, I>>(object: I): PlaceOrderResponse {
    const message = createBasePlaceOrderResponse();
    message.orderId = object.orderId ?? "";
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.chargeResponse = (object.chargeResponse !== undefined && object.chargeResponse !== null)
      ? ChargeResponse.fromPartial(object.chargeResponse)
      : undefined;
    return message;
  },
};

function createBaseCancelCheckoutRequest(): CancelCheckoutRequest {
  return { checkoutId: "" };
}

export const CancelCheckoutRequest: MessageFns<CancelCheckoutRequest> = {
  encode(message: CancelCheckoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checkoutId !== "") {
      writer.uint32(10).string(message.checkoutId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelCheckoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelCheckoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.checkoutId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelCheckoutRequest {
    return { checkoutId: isSet(object.checkoutId) ? globalThis.String(object.checkoutId) : "" };
  },

  toJSON(message: CancelCheckoutRequest): unknown {
    const obj: any = {};
    if (message.checkoutId !== "") {
      obj.checkoutId = message.checkoutId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelCheckoutRequest>, I>>(base?: I): CancelCheckoutRequest {
    return CancelCheckoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelCheckoutRequest>, I>>(object: I): CancelCheckoutRequest {
    const message = createBaseCancelCheckoutRequest();
    message.checkoutId = object.checkoutId ?? "";
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
