// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: category.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageInfo } from "./common";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";
import { StringValue } from "./google/protobuf/wrappers";

export const protobufPackage = "category";

export enum CategoryStatus {
  Active = 0,
  Locked = 1,
  Deleted = 2,
  UNRECOGNIZED = -1,
}

export function categoryStatusFromJSON(object: any): CategoryStatus {
  switch (object) {
    case 0:
    case "Active":
      return CategoryStatus.Active;
    case 1:
    case "Locked":
      return CategoryStatus.Locked;
    case 2:
    case "Deleted":
      return CategoryStatus.Deleted;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CategoryStatus.UNRECOGNIZED;
  }
}

export function categoryStatusToJSON(object: CategoryStatus): string {
  switch (object) {
    case CategoryStatus.Active:
      return "Active";
    case CategoryStatus.Locked:
      return "Locked";
    case CategoryStatus.Deleted:
      return "Deleted";
    case CategoryStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Category {
  id: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
  createdBy: string | undefined;
  updatedBy: string | undefined;
  deletedBy: string | undefined;
  name: string;
  slug: string;
  shortDescription: string | undefined;
  longDescription: string | undefined;
  thumbnailUrl: string | undefined;
  backgroundUrl: string | undefined;
  templateId: string | undefined;
  parentId: string | undefined;
  sortOrder: number;
  metaTitle: string | undefined;
  metaDescription: string | undefined;
  metaKeywords: string | undefined;
  allowCustomMetaTag: boolean;
  limitedToLocations: boolean;
  limitedToStores: boolean;
  taxCategory: string | undefined;
  pageSize: number;
  pageSizeOption: number[];
  allowCustomersToSelectPageSize: boolean;
  priceRangeFiltering: boolean;
  manuallyPriceRange: boolean;
  priceFrom: number;
  priceTo: number;
  status: CategoryStatus;
}

export interface Categories {
  categories: Category[];
}

export interface CategoryEdge {
  node: Category | undefined;
  cursor: string;
}

export interface CategoryConnection {
  pageInfo: PageInfo | undefined;
  totalCount: number;
  edges: CategoryEdge[];
}

export interface CategoryInput {
  name: string;
  slug: string;
  shortDescription: string | undefined;
  longDescription: string | undefined;
  thumbnailUrl: string | undefined;
  backgroundUrl: string | undefined;
  templateId: string | undefined;
  parentId: string | undefined;
  sortOrder: number;
  metaTitle: string | undefined;
  metaDescription: string | undefined;
  metaKeywords: string | undefined;
  allowCustomMetaTag: boolean;
  limitedToLocations: boolean;
  limitedToStores: boolean;
  taxCategory: string | undefined;
  pageSize: number;
  pageSizeOption: number[];
  allowCustomersToSelectPageSize: boolean;
  priceRangeFiltering: boolean;
  manuallyPriceRange: boolean;
  priceFrom: number;
  priceTo: number;
  status: CategoryStatus;
}

export interface CreateCategoryInput {
  data: CategoryInput | undefined;
}

export interface CreateManyCategoriesInput {
  categories: CategoryInput[];
}

export interface UpdateCategoryInput {
  id: string;
  data: CategoryInput | undefined;
}

export interface UpdateManyCategoriesInput {
  filter: Any | undefined;
  update: CategoryInput | undefined;
}

export interface DeleteManyCategoriesInput {
  filter: Any | undefined;
}

export interface NullableCategory {
  null?: NullValue | undefined;
  data?: Category | undefined;
}

function createBaseCategory(): Category {
  return {
    id: "",
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    createdBy: undefined,
    updatedBy: undefined,
    deletedBy: undefined,
    name: "",
    slug: "",
    shortDescription: undefined,
    longDescription: undefined,
    thumbnailUrl: undefined,
    backgroundUrl: undefined,
    templateId: undefined,
    parentId: undefined,
    sortOrder: 0,
    metaTitle: undefined,
    metaDescription: undefined,
    metaKeywords: undefined,
    allowCustomMetaTag: false,
    limitedToLocations: false,
    limitedToStores: false,
    taxCategory: undefined,
    pageSize: 0,
    pageSizeOption: [],
    allowCustomersToSelectPageSize: false,
    priceRangeFiltering: false,
    manuallyPriceRange: false,
    priceFrom: 0,
    priceTo: 0,
    status: 0,
  };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(34).fork()).join();
    }
    if (message.createdBy !== undefined) {
      StringValue.encode({ value: message.createdBy! }, writer.uint32(42).fork()).join();
    }
    if (message.updatedBy !== undefined) {
      StringValue.encode({ value: message.updatedBy! }, writer.uint32(50).fork()).join();
    }
    if (message.deletedBy !== undefined) {
      StringValue.encode({ value: message.deletedBy! }, writer.uint32(58).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(66).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(74).string(message.slug);
    }
    if (message.shortDescription !== undefined) {
      StringValue.encode({ value: message.shortDescription! }, writer.uint32(82).fork()).join();
    }
    if (message.longDescription !== undefined) {
      StringValue.encode({ value: message.longDescription! }, writer.uint32(90).fork()).join();
    }
    if (message.thumbnailUrl !== undefined) {
      StringValue.encode({ value: message.thumbnailUrl! }, writer.uint32(98).fork()).join();
    }
    if (message.backgroundUrl !== undefined) {
      StringValue.encode({ value: message.backgroundUrl! }, writer.uint32(106).fork()).join();
    }
    if (message.templateId !== undefined) {
      StringValue.encode({ value: message.templateId! }, writer.uint32(114).fork()).join();
    }
    if (message.parentId !== undefined) {
      StringValue.encode({ value: message.parentId! }, writer.uint32(122).fork()).join();
    }
    if (message.sortOrder !== 0) {
      writer.uint32(128).int32(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      StringValue.encode({ value: message.metaTitle! }, writer.uint32(138).fork()).join();
    }
    if (message.metaDescription !== undefined) {
      StringValue.encode({ value: message.metaDescription! }, writer.uint32(146).fork()).join();
    }
    if (message.metaKeywords !== undefined) {
      StringValue.encode({ value: message.metaKeywords! }, writer.uint32(154).fork()).join();
    }
    if (message.allowCustomMetaTag !== false) {
      writer.uint32(160).bool(message.allowCustomMetaTag);
    }
    if (message.limitedToLocations !== false) {
      writer.uint32(168).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== false) {
      writer.uint32(176).bool(message.limitedToStores);
    }
    if (message.taxCategory !== undefined) {
      StringValue.encode({ value: message.taxCategory! }, writer.uint32(186).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(192).int32(message.pageSize);
    }
    writer.uint32(202).fork();
    for (const v of message.pageSizeOption) {
      writer.int32(v);
    }
    writer.join();
    if (message.allowCustomersToSelectPageSize !== false) {
      writer.uint32(208).bool(message.allowCustomersToSelectPageSize);
    }
    if (message.priceRangeFiltering !== false) {
      writer.uint32(216).bool(message.priceRangeFiltering);
    }
    if (message.manuallyPriceRange !== false) {
      writer.uint32(224).bool(message.manuallyPriceRange);
    }
    if (message.priceFrom !== 0) {
      writer.uint32(237).float(message.priceFrom);
    }
    if (message.priceTo !== 0) {
      writer.uint32(245).float(message.priceTo);
    }
    if (message.status !== 0) {
      writer.uint32(248).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedBy = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.shortDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.longDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.thumbnailUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.backgroundUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.templateId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.parentId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.metaTitle = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.metaDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.metaKeywords = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.allowCustomMetaTag = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.taxCategory = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 25: {
          if (tag === 200) {
            message.pageSizeOption.push(reader.int32());

            continue;
          }

          if (tag === 202) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pageSizeOption.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.allowCustomersToSelectPageSize = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.priceRangeFiltering = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.manuallyPriceRange = reader.bool();
          continue;
        }
        case 29: {
          if (tag !== 237) {
            break;
          }

          message.priceFrom = reader.float();
          continue;
        }
        case 30: {
          if (tag !== 245) {
            break;
          }

          message.priceTo = reader.float();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Category {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      createdBy: isSet(object.createdBy) ? String(object.createdBy) : undefined,
      updatedBy: isSet(object.updatedBy) ? String(object.updatedBy) : undefined,
      deletedBy: isSet(object.deletedBy) ? String(object.deletedBy) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? String(object.shortDescription) : undefined,
      longDescription: isSet(object.longDescription) ? String(object.longDescription) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? String(object.thumbnailUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? String(object.backgroundUrl) : undefined,
      templateId: isSet(object.templateId) ? String(object.templateId) : undefined,
      parentId: isSet(object.parentId) ? String(object.parentId) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : 0,
      metaTitle: isSet(object.metaTitle) ? String(object.metaTitle) : undefined,
      metaDescription: isSet(object.metaDescription) ? String(object.metaDescription) : undefined,
      metaKeywords: isSet(object.metaKeywords) ? String(object.metaKeywords) : undefined,
      allowCustomMetaTag: isSet(object.allowCustomMetaTag) ? globalThis.Boolean(object.allowCustomMetaTag) : false,
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : false,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : false,
      taxCategory: isSet(object.taxCategory) ? String(object.taxCategory) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageSizeOption: globalThis.Array.isArray(object?.pageSizeOption)
        ? object.pageSizeOption.map((e: any) => globalThis.Number(e))
        : [],
      allowCustomersToSelectPageSize: isSet(object.allowCustomersToSelectPageSize)
        ? globalThis.Boolean(object.allowCustomersToSelectPageSize)
        : false,
      priceRangeFiltering: isSet(object.priceRangeFiltering) ? globalThis.Boolean(object.priceRangeFiltering) : false,
      manuallyPriceRange: isSet(object.manuallyPriceRange) ? globalThis.Boolean(object.manuallyPriceRange) : false,
      priceFrom: isSet(object.priceFrom) ? globalThis.Number(object.priceFrom) : 0,
      priceTo: isSet(object.priceTo) ? globalThis.Number(object.priceTo) : 0,
      status: isSet(object.status) ? categoryStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Category): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = message.createdBy;
    }
    if (message.updatedBy !== undefined) {
      obj.updatedBy = message.updatedBy;
    }
    if (message.deletedBy !== undefined) {
      obj.deletedBy = message.deletedBy;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== undefined) {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== undefined) {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.templateId !== undefined) {
      obj.templateId = message.templateId;
    }
    if (message.parentId !== undefined) {
      obj.parentId = message.parentId;
    }
    if (message.sortOrder !== 0) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== undefined) {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== undefined) {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.allowCustomMetaTag !== false) {
      obj.allowCustomMetaTag = message.allowCustomMetaTag;
    }
    if (message.limitedToLocations !== false) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== false) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.taxCategory !== undefined) {
      obj.taxCategory = message.taxCategory;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageSizeOption?.length) {
      obj.pageSizeOption = message.pageSizeOption.map((e) => Math.round(e));
    }
    if (message.allowCustomersToSelectPageSize !== false) {
      obj.allowCustomersToSelectPageSize = message.allowCustomersToSelectPageSize;
    }
    if (message.priceRangeFiltering !== false) {
      obj.priceRangeFiltering = message.priceRangeFiltering;
    }
    if (message.manuallyPriceRange !== false) {
      obj.manuallyPriceRange = message.manuallyPriceRange;
    }
    if (message.priceFrom !== 0) {
      obj.priceFrom = message.priceFrom;
    }
    if (message.priceTo !== 0) {
      obj.priceTo = message.priceTo;
    }
    if (message.status !== 0) {
      obj.status = categoryStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Category>, I>>(base?: I): Category {
    return Category.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Category>, I>>(object: I): Category {
    const message = createBaseCategory();
    message.id = object.id ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.updatedBy = object.updatedBy ?? undefined;
    message.deletedBy = object.deletedBy ?? undefined;
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.shortDescription = object.shortDescription ?? undefined;
    message.longDescription = object.longDescription ?? undefined;
    message.thumbnailUrl = object.thumbnailUrl ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.templateId = object.templateId ?? undefined;
    message.parentId = object.parentId ?? undefined;
    message.sortOrder = object.sortOrder ?? 0;
    message.metaTitle = object.metaTitle ?? undefined;
    message.metaDescription = object.metaDescription ?? undefined;
    message.metaKeywords = object.metaKeywords ?? undefined;
    message.allowCustomMetaTag = object.allowCustomMetaTag ?? false;
    message.limitedToLocations = object.limitedToLocations ?? false;
    message.limitedToStores = object.limitedToStores ?? false;
    message.taxCategory = object.taxCategory ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageSizeOption = object.pageSizeOption?.map((e) => e) || [];
    message.allowCustomersToSelectPageSize = object.allowCustomersToSelectPageSize ?? false;
    message.priceRangeFiltering = object.priceRangeFiltering ?? false;
    message.manuallyPriceRange = object.manuallyPriceRange ?? false;
    message.priceFrom = object.priceFrom ?? 0;
    message.priceTo = object.priceTo ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCategories(): Categories {
  return { categories: [] };
}

export const Categories: MessageFns<Categories> = {
  encode(message: Categories, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Categories {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategories();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Categories {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => Category.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Categories): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => Category.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Categories>, I>>(base?: I): Categories {
    return Categories.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Categories>, I>>(object: I): Categories {
    const message = createBaseCategories();
    message.categories = object.categories?.map((e) => Category.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCategoryEdge(): CategoryEdge {
  return { node: undefined, cursor: "" };
}

export const CategoryEdge: MessageFns<CategoryEdge> = {
  encode(message: CategoryEdge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Category.encode(message.node, writer.uint32(10).fork()).join();
    }
    if (message.cursor !== "") {
      writer.uint32(18).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryEdge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Category.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryEdge {
    return {
      node: isSet(object.node) ? Category.fromJSON(object.node) : undefined,
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
    };
  },

  toJSON(message: CategoryEdge): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Category.toJSON(message.node);
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryEdge>, I>>(base?: I): CategoryEdge {
    return CategoryEdge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryEdge>, I>>(object: I): CategoryEdge {
    const message = createBaseCategoryEdge();
    message.node = (object.node !== undefined && object.node !== null) ? Category.fromPartial(object.node) : undefined;
    message.cursor = object.cursor ?? "";
    return message;
  },
};

function createBaseCategoryConnection(): CategoryConnection {
  return { pageInfo: undefined, totalCount: 0, edges: [] };
}

export const CategoryConnection: MessageFns<CategoryConnection> = {
  encode(message: CategoryConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageInfo !== undefined) {
      PageInfo.encode(message.pageInfo, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    for (const v of message.edges) {
      CategoryEdge.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageInfo = PageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.edges.push(CategoryEdge.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryConnection {
    return {
      pageInfo: isSet(object.pageInfo) ? PageInfo.fromJSON(object.pageInfo) : undefined,
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => CategoryEdge.fromJSON(e)) : [],
    };
  },

  toJSON(message: CategoryConnection): unknown {
    const obj: any = {};
    if (message.pageInfo !== undefined) {
      obj.pageInfo = PageInfo.toJSON(message.pageInfo);
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => CategoryEdge.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryConnection>, I>>(base?: I): CategoryConnection {
    return CategoryConnection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryConnection>, I>>(object: I): CategoryConnection {
    const message = createBaseCategoryConnection();
    message.pageInfo = (object.pageInfo !== undefined && object.pageInfo !== null)
      ? PageInfo.fromPartial(object.pageInfo)
      : undefined;
    message.totalCount = object.totalCount ?? 0;
    message.edges = object.edges?.map((e) => CategoryEdge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCategoryInput(): CategoryInput {
  return {
    name: "",
    slug: "",
    shortDescription: undefined,
    longDescription: undefined,
    thumbnailUrl: undefined,
    backgroundUrl: undefined,
    templateId: undefined,
    parentId: undefined,
    sortOrder: 0,
    metaTitle: undefined,
    metaDescription: undefined,
    metaKeywords: undefined,
    allowCustomMetaTag: false,
    limitedToLocations: false,
    limitedToStores: false,
    taxCategory: undefined,
    pageSize: 0,
    pageSizeOption: [],
    allowCustomersToSelectPageSize: false,
    priceRangeFiltering: false,
    manuallyPriceRange: false,
    priceFrom: 0,
    priceTo: 0,
    status: 0,
  };
}

export const CategoryInput: MessageFns<CategoryInput> = {
  encode(message: CategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.shortDescription !== undefined) {
      StringValue.encode({ value: message.shortDescription! }, writer.uint32(26).fork()).join();
    }
    if (message.longDescription !== undefined) {
      StringValue.encode({ value: message.longDescription! }, writer.uint32(34).fork()).join();
    }
    if (message.thumbnailUrl !== undefined) {
      StringValue.encode({ value: message.thumbnailUrl! }, writer.uint32(42).fork()).join();
    }
    if (message.backgroundUrl !== undefined) {
      StringValue.encode({ value: message.backgroundUrl! }, writer.uint32(50).fork()).join();
    }
    if (message.templateId !== undefined) {
      StringValue.encode({ value: message.templateId! }, writer.uint32(58).fork()).join();
    }
    if (message.parentId !== undefined) {
      StringValue.encode({ value: message.parentId! }, writer.uint32(66).fork()).join();
    }
    if (message.sortOrder !== 0) {
      writer.uint32(72).int32(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      StringValue.encode({ value: message.metaTitle! }, writer.uint32(82).fork()).join();
    }
    if (message.metaDescription !== undefined) {
      StringValue.encode({ value: message.metaDescription! }, writer.uint32(90).fork()).join();
    }
    if (message.metaKeywords !== undefined) {
      StringValue.encode({ value: message.metaKeywords! }, writer.uint32(98).fork()).join();
    }
    if (message.allowCustomMetaTag !== false) {
      writer.uint32(104).bool(message.allowCustomMetaTag);
    }
    if (message.limitedToLocations !== false) {
      writer.uint32(112).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== false) {
      writer.uint32(120).bool(message.limitedToStores);
    }
    if (message.taxCategory !== undefined) {
      StringValue.encode({ value: message.taxCategory! }, writer.uint32(130).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(136).int32(message.pageSize);
    }
    writer.uint32(146).fork();
    for (const v of message.pageSizeOption) {
      writer.int32(v);
    }
    writer.join();
    if (message.allowCustomersToSelectPageSize !== false) {
      writer.uint32(152).bool(message.allowCustomersToSelectPageSize);
    }
    if (message.priceRangeFiltering !== false) {
      writer.uint32(160).bool(message.priceRangeFiltering);
    }
    if (message.manuallyPriceRange !== false) {
      writer.uint32(168).bool(message.manuallyPriceRange);
    }
    if (message.priceFrom !== 0) {
      writer.uint32(181).float(message.priceFrom);
    }
    if (message.priceTo !== 0) {
      writer.uint32(189).float(message.priceTo);
    }
    if (message.status !== 0) {
      writer.uint32(192).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.longDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.thumbnailUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.backgroundUrl = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.templateId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.parentId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metaTitle = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.metaDescription = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metaKeywords = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.allowCustomMetaTag = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.taxCategory = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 18: {
          if (tag === 144) {
            message.pageSizeOption.push(reader.int32());

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pageSizeOption.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.allowCustomersToSelectPageSize = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.priceRangeFiltering = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.manuallyPriceRange = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 181) {
            break;
          }

          message.priceFrom = reader.float();
          continue;
        }
        case 23: {
          if (tag !== 189) {
            break;
          }

          message.priceTo = reader.float();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryInput {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? String(object.shortDescription) : undefined,
      longDescription: isSet(object.longDescription) ? String(object.longDescription) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? String(object.thumbnailUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? String(object.backgroundUrl) : undefined,
      templateId: isSet(object.templateId) ? String(object.templateId) : undefined,
      parentId: isSet(object.parentId) ? String(object.parentId) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : 0,
      metaTitle: isSet(object.metaTitle) ? String(object.metaTitle) : undefined,
      metaDescription: isSet(object.metaDescription) ? String(object.metaDescription) : undefined,
      metaKeywords: isSet(object.metaKeywords) ? String(object.metaKeywords) : undefined,
      allowCustomMetaTag: isSet(object.allowCustomMetaTag) ? globalThis.Boolean(object.allowCustomMetaTag) : false,
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : false,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : false,
      taxCategory: isSet(object.taxCategory) ? String(object.taxCategory) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageSizeOption: globalThis.Array.isArray(object?.pageSizeOption)
        ? object.pageSizeOption.map((e: any) => globalThis.Number(e))
        : [],
      allowCustomersToSelectPageSize: isSet(object.allowCustomersToSelectPageSize)
        ? globalThis.Boolean(object.allowCustomersToSelectPageSize)
        : false,
      priceRangeFiltering: isSet(object.priceRangeFiltering) ? globalThis.Boolean(object.priceRangeFiltering) : false,
      manuallyPriceRange: isSet(object.manuallyPriceRange) ? globalThis.Boolean(object.manuallyPriceRange) : false,
      priceFrom: isSet(object.priceFrom) ? globalThis.Number(object.priceFrom) : 0,
      priceTo: isSet(object.priceTo) ? globalThis.Number(object.priceTo) : 0,
      status: isSet(object.status) ? categoryStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CategoryInput): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== undefined) {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== undefined) {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.templateId !== undefined) {
      obj.templateId = message.templateId;
    }
    if (message.parentId !== undefined) {
      obj.parentId = message.parentId;
    }
    if (message.sortOrder !== 0) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== undefined) {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== undefined) {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.allowCustomMetaTag !== false) {
      obj.allowCustomMetaTag = message.allowCustomMetaTag;
    }
    if (message.limitedToLocations !== false) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== false) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.taxCategory !== undefined) {
      obj.taxCategory = message.taxCategory;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageSizeOption?.length) {
      obj.pageSizeOption = message.pageSizeOption.map((e) => Math.round(e));
    }
    if (message.allowCustomersToSelectPageSize !== false) {
      obj.allowCustomersToSelectPageSize = message.allowCustomersToSelectPageSize;
    }
    if (message.priceRangeFiltering !== false) {
      obj.priceRangeFiltering = message.priceRangeFiltering;
    }
    if (message.manuallyPriceRange !== false) {
      obj.manuallyPriceRange = message.manuallyPriceRange;
    }
    if (message.priceFrom !== 0) {
      obj.priceFrom = message.priceFrom;
    }
    if (message.priceTo !== 0) {
      obj.priceTo = message.priceTo;
    }
    if (message.status !== 0) {
      obj.status = categoryStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryInput>, I>>(base?: I): CategoryInput {
    return CategoryInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryInput>, I>>(object: I): CategoryInput {
    const message = createBaseCategoryInput();
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.shortDescription = object.shortDescription ?? undefined;
    message.longDescription = object.longDescription ?? undefined;
    message.thumbnailUrl = object.thumbnailUrl ?? undefined;
    message.backgroundUrl = object.backgroundUrl ?? undefined;
    message.templateId = object.templateId ?? undefined;
    message.parentId = object.parentId ?? undefined;
    message.sortOrder = object.sortOrder ?? 0;
    message.metaTitle = object.metaTitle ?? undefined;
    message.metaDescription = object.metaDescription ?? undefined;
    message.metaKeywords = object.metaKeywords ?? undefined;
    message.allowCustomMetaTag = object.allowCustomMetaTag ?? false;
    message.limitedToLocations = object.limitedToLocations ?? false;
    message.limitedToStores = object.limitedToStores ?? false;
    message.taxCategory = object.taxCategory ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageSizeOption = object.pageSizeOption?.map((e) => e) || [];
    message.allowCustomersToSelectPageSize = object.allowCustomersToSelectPageSize ?? false;
    message.priceRangeFiltering = object.priceRangeFiltering ?? false;
    message.manuallyPriceRange = object.manuallyPriceRange ?? false;
    message.priceFrom = object.priceFrom ?? 0;
    message.priceTo = object.priceTo ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCreateCategoryInput(): CreateCategoryInput {
  return { data: undefined };
}

export const CreateCategoryInput: MessageFns<CreateCategoryInput> = {
  encode(message: CreateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CategoryInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCategoryInput {
    return { data: isSet(object.data) ? CategoryInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateCategoryInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CategoryInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCategoryInput>, I>>(base?: I): CreateCategoryInput {
    return CreateCategoryInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCategoryInput>, I>>(object: I): CreateCategoryInput {
    const message = createBaseCreateCategoryInput();
    message.data = (object.data !== undefined && object.data !== null)
      ? CategoryInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCreateManyCategoriesInput(): CreateManyCategoriesInput {
  return { categories: [] };
}

export const CreateManyCategoriesInput: MessageFns<CreateManyCategoriesInput> = {
  encode(message: CreateManyCategoriesInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      CategoryInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyCategoriesInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyCategoriesInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(CategoryInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyCategoriesInput {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => CategoryInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateManyCategoriesInput): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => CategoryInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateManyCategoriesInput>, I>>(base?: I): CreateManyCategoriesInput {
    return CreateManyCategoriesInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateManyCategoriesInput>, I>>(object: I): CreateManyCategoriesInput {
    const message = createBaseCreateManyCategoriesInput();
    message.categories = object.categories?.map((e) => CategoryInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateCategoryInput(): UpdateCategoryInput {
  return { id: "", data: undefined };
}

export const UpdateCategoryInput: MessageFns<UpdateCategoryInput> = {
  encode(message: UpdateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      CategoryInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCategoryInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? CategoryInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateCategoryInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = CategoryInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCategoryInput>, I>>(base?: I): UpdateCategoryInput {
    return UpdateCategoryInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCategoryInput>, I>>(object: I): UpdateCategoryInput {
    const message = createBaseUpdateCategoryInput();
    message.id = object.id ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? CategoryInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateManyCategoriesInput(): UpdateManyCategoriesInput {
  return { filter: undefined, update: undefined };
}

export const UpdateManyCategoriesInput: MessageFns<UpdateManyCategoriesInput> = {
  encode(message: UpdateManyCategoriesInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      CategoryInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyCategoriesInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyCategoriesInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyCategoriesInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? CategoryInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyCategoriesInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = CategoryInput.toJSON(message.update);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateManyCategoriesInput>, I>>(base?: I): UpdateManyCategoriesInput {
    return UpdateManyCategoriesInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateManyCategoriesInput>, I>>(object: I): UpdateManyCategoriesInput {
    const message = createBaseUpdateManyCategoriesInput();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Any.fromPartial(object.filter)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CategoryInput.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseDeleteManyCategoriesInput(): DeleteManyCategoriesInput {
  return { filter: undefined };
}

export const DeleteManyCategoriesInput: MessageFns<DeleteManyCategoriesInput> = {
  encode(message: DeleteManyCategoriesInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyCategoriesInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyCategoriesInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyCategoriesInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyCategoriesInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteManyCategoriesInput>, I>>(base?: I): DeleteManyCategoriesInput {
    return DeleteManyCategoriesInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteManyCategoriesInput>, I>>(object: I): DeleteManyCategoriesInput {
    const message = createBaseDeleteManyCategoriesInput();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Any.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseNullableCategory(): NullableCategory {
  return { null: undefined, data: undefined };
}

export const NullableCategory: MessageFns<NullableCategory> = {
  encode(message: NullableCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      Category.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Category.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableCategory {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? Category.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableCategory): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = Category.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NullableCategory>, I>>(base?: I): NullableCategory {
    return NullableCategory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NullableCategory>, I>>(object: I): NullableCategory {
    const message = createBaseNullableCategory();
    message.null = object.null ?? undefined;
    message.data = (object.data !== undefined && object.data !== null) ? Category.fromPartial(object.data) : undefined;
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
