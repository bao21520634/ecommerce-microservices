// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: category.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";
import { Any } from "./google/protobuf/any";
import { NullValue, nullValueFromJSON, nullValueToJSON } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "category";

export enum CategoryStatus {
  Active = 0,
  Locked = 1,
  Deleted = 2,
  UNRECOGNIZED = -1,
}

export function categoryStatusFromJSON(object: any): CategoryStatus {
  switch (object) {
    case 0:
    case "Active":
      return CategoryStatus.Active;
    case 1:
    case "Locked":
      return CategoryStatus.Locked;
    case 2:
    case "Deleted":
      return CategoryStatus.Deleted;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CategoryStatus.UNRECOGNIZED;
  }
}

export function categoryStatusToJSON(object: CategoryStatus): string {
  switch (object) {
    case CategoryStatus.Active:
      return "Active";
    case CategoryStatus.Locked:
      return "Locked";
    case CategoryStatus.Deleted:
      return "Deleted";
    case CategoryStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Category {
  id: string;
  name: string;
  slug: string;
  shortDescription?: string | undefined;
  longDescription?: string | undefined;
  thumbnailUrl?: string | undefined;
  backgroundUrl?: string | undefined;
  templateId?: string | undefined;
  parentId?: string | undefined;
  sortOrder?: number | undefined;
  metaTitle?: string | undefined;
  metaDescription?: string | undefined;
  metaKeywords?: string | undefined;
  allowCustomMetaTag?: boolean | undefined;
  limitedToLocations?: boolean | undefined;
  limitedToStores?: boolean | undefined;
  taxCategory?: string | undefined;
  pageSize?: number | undefined;
  allowCustomersToSelectPageSize?: boolean | undefined;
  priceRangeFiltering?: boolean | undefined;
  manuallyPriceRange?: boolean | undefined;
  priceFrom?: number | undefined;
  priceTo?: number | undefined;
  status?: CategoryStatus | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface Categories {
  categories: Category[];
}

export interface CategoryInput {
  name: string;
  slug: string;
  shortDescription?: string | undefined;
  longDescription?: string | undefined;
  thumbnailUrl?: string | undefined;
  backgroundUrl?: string | undefined;
  templateId?: string | undefined;
  parentId?: string | undefined;
  sortOrder?: number | undefined;
  metaTitle?: string | undefined;
  metaDescription?: string | undefined;
  metaKeywords?: string | undefined;
  allowCustomMetaTag?: boolean | undefined;
  limitedToLocations?: boolean | undefined;
  limitedToStores?: boolean | undefined;
  taxCategory?: string | undefined;
  pageSize?: number | undefined;
  allowCustomersToSelectPageSize?: boolean | undefined;
  priceRangeFiltering?: boolean | undefined;
  manuallyPriceRange?: boolean | undefined;
  priceFrom?: number | undefined;
  priceTo?: number | undefined;
  status?: CategoryStatus | undefined;
}

export interface CreateCategoryInput {
  data?: CategoryInput | undefined;
}

export interface CreateManyCategoriesInput {
  categories: CategoryInput[];
}

export interface UpdateCategoryInput {
  id: string;
  data?: CategoryInput | undefined;
}

export interface UpdateManyCategoriesInput {
  filter?: Any | undefined;
  update?: CategoryInput | undefined;
}

export interface DeleteManyCategoriesInput {
  filter?: Any | undefined;
}

export interface NullableCategory {
  null?: NullValue | undefined;
  data?: Category | undefined;
}

export const CATEGORY_PACKAGE_NAME = "category";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseCategory(): Category {
  return { id: "", name: "", slug: "" };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(26).string(message.slug);
    }
    if (message.shortDescription !== undefined) {
      writer.uint32(34).string(message.shortDescription);
    }
    if (message.longDescription !== undefined) {
      writer.uint32(42).string(message.longDescription);
    }
    if (message.thumbnailUrl !== undefined) {
      writer.uint32(50).string(message.thumbnailUrl);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(58).string(message.backgroundUrl);
    }
    if (message.templateId !== undefined) {
      writer.uint32(66).string(message.templateId);
    }
    if (message.parentId !== undefined) {
      writer.uint32(74).string(message.parentId);
    }
    if (message.sortOrder !== undefined) {
      writer.uint32(80).int32(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      writer.uint32(90).string(message.metaTitle);
    }
    if (message.metaDescription !== undefined) {
      writer.uint32(98).string(message.metaDescription);
    }
    if (message.metaKeywords !== undefined) {
      writer.uint32(106).string(message.metaKeywords);
    }
    if (message.allowCustomMetaTag !== undefined) {
      writer.uint32(112).bool(message.allowCustomMetaTag);
    }
    if (message.limitedToLocations !== undefined) {
      writer.uint32(120).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== undefined) {
      writer.uint32(128).bool(message.limitedToStores);
    }
    if (message.taxCategory !== undefined) {
      writer.uint32(138).string(message.taxCategory);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(144).int32(message.pageSize);
    }
    if (message.allowCustomersToSelectPageSize !== undefined) {
      writer.uint32(152).bool(message.allowCustomersToSelectPageSize);
    }
    if (message.priceRangeFiltering !== undefined) {
      writer.uint32(160).bool(message.priceRangeFiltering);
    }
    if (message.manuallyPriceRange !== undefined) {
      writer.uint32(168).bool(message.manuallyPriceRange);
    }
    if (message.priceFrom !== undefined) {
      writer.uint32(181).float(message.priceFrom);
    }
    if (message.priceTo !== undefined) {
      writer.uint32(189).float(message.priceTo);
    }
    if (message.status !== undefined) {
      writer.uint32(192).int32(message.status);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(202).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(210).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.longDescription = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.templateId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.metaTitle = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metaDescription = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.allowCustomMetaTag = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.taxCategory = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.allowCustomersToSelectPageSize = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.priceRangeFiltering = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.manuallyPriceRange = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 181) {
            break;
          }

          message.priceFrom = reader.float();
          continue;
        }
        case 23: {
          if (tag !== 189) {
            break;
          }

          message.priceTo = reader.float();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Category {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : undefined,
      longDescription: isSet(object.longDescription) ? globalThis.String(object.longDescription) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : undefined,
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : undefined,
      metaTitle: isSet(object.metaTitle) ? globalThis.String(object.metaTitle) : undefined,
      metaDescription: isSet(object.metaDescription) ? globalThis.String(object.metaDescription) : undefined,
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : undefined,
      allowCustomMetaTag: isSet(object.allowCustomMetaTag) ? globalThis.Boolean(object.allowCustomMetaTag) : undefined,
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : undefined,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : undefined,
      taxCategory: isSet(object.taxCategory) ? globalThis.String(object.taxCategory) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      allowCustomersToSelectPageSize: isSet(object.allowCustomersToSelectPageSize)
        ? globalThis.Boolean(object.allowCustomersToSelectPageSize)
        : undefined,
      priceRangeFiltering: isSet(object.priceRangeFiltering)
        ? globalThis.Boolean(object.priceRangeFiltering)
        : undefined,
      manuallyPriceRange: isSet(object.manuallyPriceRange) ? globalThis.Boolean(object.manuallyPriceRange) : undefined,
      priceFrom: isSet(object.priceFrom) ? globalThis.Number(object.priceFrom) : undefined,
      priceTo: isSet(object.priceTo) ? globalThis.Number(object.priceTo) : undefined,
      status: isSet(object.status) ? categoryStatusFromJSON(object.status) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Category): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== undefined) {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== undefined) {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.templateId !== undefined) {
      obj.templateId = message.templateId;
    }
    if (message.parentId !== undefined) {
      obj.parentId = message.parentId;
    }
    if (message.sortOrder !== undefined) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== undefined) {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== undefined) {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.allowCustomMetaTag !== undefined) {
      obj.allowCustomMetaTag = message.allowCustomMetaTag;
    }
    if (message.limitedToLocations !== undefined) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== undefined) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.taxCategory !== undefined) {
      obj.taxCategory = message.taxCategory;
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.allowCustomersToSelectPageSize !== undefined) {
      obj.allowCustomersToSelectPageSize = message.allowCustomersToSelectPageSize;
    }
    if (message.priceRangeFiltering !== undefined) {
      obj.priceRangeFiltering = message.priceRangeFiltering;
    }
    if (message.manuallyPriceRange !== undefined) {
      obj.manuallyPriceRange = message.manuallyPriceRange;
    }
    if (message.priceFrom !== undefined) {
      obj.priceFrom = message.priceFrom;
    }
    if (message.priceTo !== undefined) {
      obj.priceTo = message.priceTo;
    }
    if (message.status !== undefined) {
      obj.status = categoryStatusToJSON(message.status);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseCategories(): Categories {
  return { categories: [] };
}

export const Categories: MessageFns<Categories> = {
  encode(message: Categories, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Categories {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategories();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Categories {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => Category.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Categories): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => Category.toJSON(e));
    }
    return obj;
  },
};

function createBaseCategoryInput(): CategoryInput {
  return { name: "", slug: "" };
}

export const CategoryInput: MessageFns<CategoryInput> = {
  encode(message: CategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.shortDescription !== undefined) {
      writer.uint32(26).string(message.shortDescription);
    }
    if (message.longDescription !== undefined) {
      writer.uint32(34).string(message.longDescription);
    }
    if (message.thumbnailUrl !== undefined) {
      writer.uint32(42).string(message.thumbnailUrl);
    }
    if (message.backgroundUrl !== undefined) {
      writer.uint32(50).string(message.backgroundUrl);
    }
    if (message.templateId !== undefined) {
      writer.uint32(58).string(message.templateId);
    }
    if (message.parentId !== undefined) {
      writer.uint32(66).string(message.parentId);
    }
    if (message.sortOrder !== undefined) {
      writer.uint32(72).int32(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      writer.uint32(82).string(message.metaTitle);
    }
    if (message.metaDescription !== undefined) {
      writer.uint32(90).string(message.metaDescription);
    }
    if (message.metaKeywords !== undefined) {
      writer.uint32(98).string(message.metaKeywords);
    }
    if (message.allowCustomMetaTag !== undefined) {
      writer.uint32(104).bool(message.allowCustomMetaTag);
    }
    if (message.limitedToLocations !== undefined) {
      writer.uint32(112).bool(message.limitedToLocations);
    }
    if (message.limitedToStores !== undefined) {
      writer.uint32(120).bool(message.limitedToStores);
    }
    if (message.taxCategory !== undefined) {
      writer.uint32(130).string(message.taxCategory);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(136).int32(message.pageSize);
    }
    if (message.allowCustomersToSelectPageSize !== undefined) {
      writer.uint32(144).bool(message.allowCustomersToSelectPageSize);
    }
    if (message.priceRangeFiltering !== undefined) {
      writer.uint32(152).bool(message.priceRangeFiltering);
    }
    if (message.manuallyPriceRange !== undefined) {
      writer.uint32(160).bool(message.manuallyPriceRange);
    }
    if (message.priceFrom !== undefined) {
      writer.uint32(173).float(message.priceFrom);
    }
    if (message.priceTo !== undefined) {
      writer.uint32(181).float(message.priceTo);
    }
    if (message.status !== undefined) {
      writer.uint32(184).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.longDescription = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.backgroundUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.templateId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sortOrder = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metaTitle = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.metaDescription = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.allowCustomMetaTag = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.limitedToLocations = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.limitedToStores = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.taxCategory = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.allowCustomersToSelectPageSize = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.priceRangeFiltering = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.manuallyPriceRange = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 173) {
            break;
          }

          message.priceFrom = reader.float();
          continue;
        }
        case 22: {
          if (tag !== 181) {
            break;
          }

          message.priceTo = reader.float();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryInput {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : undefined,
      longDescription: isSet(object.longDescription) ? globalThis.String(object.longDescription) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : undefined,
      backgroundUrl: isSet(object.backgroundUrl) ? globalThis.String(object.backgroundUrl) : undefined,
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : undefined,
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.Number(object.sortOrder) : undefined,
      metaTitle: isSet(object.metaTitle) ? globalThis.String(object.metaTitle) : undefined,
      metaDescription: isSet(object.metaDescription) ? globalThis.String(object.metaDescription) : undefined,
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : undefined,
      allowCustomMetaTag: isSet(object.allowCustomMetaTag) ? globalThis.Boolean(object.allowCustomMetaTag) : undefined,
      limitedToLocations: isSet(object.limitedToLocations) ? globalThis.Boolean(object.limitedToLocations) : undefined,
      limitedToStores: isSet(object.limitedToStores) ? globalThis.Boolean(object.limitedToStores) : undefined,
      taxCategory: isSet(object.taxCategory) ? globalThis.String(object.taxCategory) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      allowCustomersToSelectPageSize: isSet(object.allowCustomersToSelectPageSize)
        ? globalThis.Boolean(object.allowCustomersToSelectPageSize)
        : undefined,
      priceRangeFiltering: isSet(object.priceRangeFiltering)
        ? globalThis.Boolean(object.priceRangeFiltering)
        : undefined,
      manuallyPriceRange: isSet(object.manuallyPriceRange) ? globalThis.Boolean(object.manuallyPriceRange) : undefined,
      priceFrom: isSet(object.priceFrom) ? globalThis.Number(object.priceFrom) : undefined,
      priceTo: isSet(object.priceTo) ? globalThis.Number(object.priceTo) : undefined,
      status: isSet(object.status) ? categoryStatusFromJSON(object.status) : undefined,
    };
  },

  toJSON(message: CategoryInput): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.shortDescription !== undefined) {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== undefined) {
      obj.longDescription = message.longDescription;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.backgroundUrl !== undefined) {
      obj.backgroundUrl = message.backgroundUrl;
    }
    if (message.templateId !== undefined) {
      obj.templateId = message.templateId;
    }
    if (message.parentId !== undefined) {
      obj.parentId = message.parentId;
    }
    if (message.sortOrder !== undefined) {
      obj.sortOrder = Math.round(message.sortOrder);
    }
    if (message.metaTitle !== undefined) {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== undefined) {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== undefined) {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.allowCustomMetaTag !== undefined) {
      obj.allowCustomMetaTag = message.allowCustomMetaTag;
    }
    if (message.limitedToLocations !== undefined) {
      obj.limitedToLocations = message.limitedToLocations;
    }
    if (message.limitedToStores !== undefined) {
      obj.limitedToStores = message.limitedToStores;
    }
    if (message.taxCategory !== undefined) {
      obj.taxCategory = message.taxCategory;
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.allowCustomersToSelectPageSize !== undefined) {
      obj.allowCustomersToSelectPageSize = message.allowCustomersToSelectPageSize;
    }
    if (message.priceRangeFiltering !== undefined) {
      obj.priceRangeFiltering = message.priceRangeFiltering;
    }
    if (message.manuallyPriceRange !== undefined) {
      obj.manuallyPriceRange = message.manuallyPriceRange;
    }
    if (message.priceFrom !== undefined) {
      obj.priceFrom = message.priceFrom;
    }
    if (message.priceTo !== undefined) {
      obj.priceTo = message.priceTo;
    }
    if (message.status !== undefined) {
      obj.status = categoryStatusToJSON(message.status);
    }
    return obj;
  },
};

function createBaseCreateCategoryInput(): CreateCategoryInput {
  return {};
}

export const CreateCategoryInput: MessageFns<CreateCategoryInput> = {
  encode(message: CreateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CategoryInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCategoryInput {
    return { data: isSet(object.data) ? CategoryInput.fromJSON(object.data) : undefined };
  },

  toJSON(message: CreateCategoryInput): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CategoryInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseCreateManyCategoriesInput(): CreateManyCategoriesInput {
  return { categories: [] };
}

export const CreateManyCategoriesInput: MessageFns<CreateManyCategoriesInput> = {
  encode(message: CreateManyCategoriesInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      CategoryInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManyCategoriesInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManyCategoriesInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(CategoryInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManyCategoriesInput {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => CategoryInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateManyCategoriesInput): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => CategoryInput.toJSON(e));
    }
    return obj;
  },
};

function createBaseUpdateCategoryInput(): UpdateCategoryInput {
  return { id: "" };
}

export const UpdateCategoryInput: MessageFns<UpdateCategoryInput> = {
  encode(message: UpdateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      CategoryInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCategoryInput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? CategoryInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateCategoryInput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = CategoryInput.toJSON(message.data);
    }
    return obj;
  },
};

function createBaseUpdateManyCategoriesInput(): UpdateManyCategoriesInput {
  return {};
}

export const UpdateManyCategoriesInput: MessageFns<UpdateManyCategoriesInput> = {
  encode(message: UpdateManyCategoriesInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      CategoryInput.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateManyCategoriesInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateManyCategoriesInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.update = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateManyCategoriesInput {
    return {
      filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined,
      update: isSet(object.update) ? CategoryInput.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: UpdateManyCategoriesInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    if (message.update !== undefined) {
      obj.update = CategoryInput.toJSON(message.update);
    }
    return obj;
  },
};

function createBaseDeleteManyCategoriesInput(): DeleteManyCategoriesInput {
  return {};
}

export const DeleteManyCategoriesInput: MessageFns<DeleteManyCategoriesInput> = {
  encode(message: DeleteManyCategoriesInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      Any.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyCategoriesInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyCategoriesInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyCategoriesInput {
    return { filter: isSet(object.filter) ? Any.fromJSON(object.filter) : undefined };
  },

  toJSON(message: DeleteManyCategoriesInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = Any.toJSON(message.filter);
    }
    return obj;
  },
};

function createBaseNullableCategory(): NullableCategory {
  return {};
}

export const NullableCategory: MessageFns<NullableCategory> = {
  encode(message: NullableCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.null !== undefined) {
      writer.uint32(8).int32(message.null);
    }
    if (message.data !== undefined) {
      Category.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NullableCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNullableCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.null = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = Category.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NullableCategory {
    return {
      null: isSet(object.null) ? nullValueFromJSON(object.null) : undefined,
      data: isSet(object.data) ? Category.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: NullableCategory): unknown {
    const obj: any = {};
    if (message.null !== undefined) {
      obj.null = nullValueToJSON(message.null);
    }
    if (message.data !== undefined) {
      obj.data = Category.toJSON(message.data);
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
