// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "common";

export interface Id {
  id: string;
}

export interface Query {
  filter: string;
  paging: Paging | undefined;
  sorting: Sort[];
}

export interface PageInfo {
  startCursor: string;
  endCursor: string;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

export interface Count {
  totalCount: number;
}

export interface Paging {
  limit: number;
  offset: number;
}

export interface Sort {
  field: string;
  direction: Sort_SortDirection;
  nulls: Sort_SortNulls;
}

export enum Sort_SortDirection {
  ASC = 0,
  DESC = 1,
  UNRECOGNIZED = -1,
}

export function sort_SortDirectionFromJSON(object: any): Sort_SortDirection {
  switch (object) {
    case 0:
    case "ASC":
      return Sort_SortDirection.ASC;
    case 1:
    case "DESC":
      return Sort_SortDirection.DESC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Sort_SortDirection.UNRECOGNIZED;
  }
}

export function sort_SortDirectionToJSON(object: Sort_SortDirection): string {
  switch (object) {
    case Sort_SortDirection.ASC:
      return "ASC";
    case Sort_SortDirection.DESC:
      return "DESC";
    case Sort_SortDirection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Sort_SortNulls {
  NULLS_FIRST = 0,
  NULLS_LAST = 1,
  UNRECOGNIZED = -1,
}

export function sort_SortNullsFromJSON(object: any): Sort_SortNulls {
  switch (object) {
    case 0:
    case "NULLS_FIRST":
      return Sort_SortNulls.NULLS_FIRST;
    case 1:
    case "NULLS_LAST":
      return Sort_SortNulls.NULLS_LAST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Sort_SortNulls.UNRECOGNIZED;
  }
}

export function sort_SortNullsToJSON(object: Sort_SortNulls): string {
  switch (object) {
    case Sort_SortNulls.NULLS_FIRST:
      return "NULLS_FIRST";
    case Sort_SortNulls.NULLS_LAST:
      return "NULLS_LAST";
    case Sort_SortNulls.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DeleteManyResponse {
  deletedCount: number;
}

function createBaseId(): Id {
  return { id: "" };
}

export const Id: MessageFns<Id> = {
  encode(message: Id, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Id {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Id {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Id): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Id>, I>>(base?: I): Id {
    return Id.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Id>, I>>(object: I): Id {
    const message = createBaseId();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQuery(): Query {
  return { filter: "", paging: undefined, sorting: [] };
}

export const Query: MessageFns<Query> = {
  encode(message: Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.paging !== undefined) {
      Paging.encode(message.paging, writer.uint32(18).fork()).join();
    }
    for (const v of message.sorting) {
      Sort.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paging = Paging.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sorting.push(Sort.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Query {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      paging: isSet(object.paging) ? Paging.fromJSON(object.paging) : undefined,
      sorting: globalThis.Array.isArray(object?.sorting) ? object.sorting.map((e: any) => Sort.fromJSON(e)) : [],
    };
  },

  toJSON(message: Query): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.paging !== undefined) {
      obj.paging = Paging.toJSON(message.paging);
    }
    if (message.sorting?.length) {
      obj.sorting = message.sorting.map((e) => Sort.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Query>, I>>(base?: I): Query {
    return Query.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Query>, I>>(object: I): Query {
    const message = createBaseQuery();
    message.filter = object.filter ?? "";
    message.paging = (object.paging !== undefined && object.paging !== null)
      ? Paging.fromPartial(object.paging)
      : undefined;
    message.sorting = object.sorting?.map((e) => Sort.fromPartial(e)) || [];
    return message;
  },
};

function createBasePageInfo(): PageInfo {
  return { startCursor: "", endCursor: "", hasNextPage: false, hasPreviousPage: false };
}

export const PageInfo: MessageFns<PageInfo> = {
  encode(message: PageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startCursor !== "") {
      writer.uint32(10).string(message.startCursor);
    }
    if (message.endCursor !== "") {
      writer.uint32(18).string(message.endCursor);
    }
    if (message.hasNextPage !== false) {
      writer.uint32(24).bool(message.hasNextPage);
    }
    if (message.hasPreviousPage !== false) {
      writer.uint32(32).bool(message.hasPreviousPage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startCursor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endCursor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasNextPage = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasPreviousPage = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PageInfo {
    return {
      startCursor: isSet(object.startCursor) ? globalThis.String(object.startCursor) : "",
      endCursor: isSet(object.endCursor) ? globalThis.String(object.endCursor) : "",
      hasNextPage: isSet(object.hasNextPage) ? globalThis.Boolean(object.hasNextPage) : false,
      hasPreviousPage: isSet(object.hasPreviousPage) ? globalThis.Boolean(object.hasPreviousPage) : false,
    };
  },

  toJSON(message: PageInfo): unknown {
    const obj: any = {};
    if (message.startCursor !== "") {
      obj.startCursor = message.startCursor;
    }
    if (message.endCursor !== "") {
      obj.endCursor = message.endCursor;
    }
    if (message.hasNextPage !== false) {
      obj.hasNextPage = message.hasNextPage;
    }
    if (message.hasPreviousPage !== false) {
      obj.hasPreviousPage = message.hasPreviousPage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PageInfo>, I>>(base?: I): PageInfo {
    return PageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PageInfo>, I>>(object: I): PageInfo {
    const message = createBasePageInfo();
    message.startCursor = object.startCursor ?? "";
    message.endCursor = object.endCursor ?? "";
    message.hasNextPage = object.hasNextPage ?? false;
    message.hasPreviousPage = object.hasPreviousPage ?? false;
    return message;
  },
};

function createBaseCount(): Count {
  return { totalCount: 0 };
}

export const Count: MessageFns<Count> = {
  encode(message: Count, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalCount !== 0) {
      writer.uint32(8).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Count {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Count {
    return { totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0 };
  },

  toJSON(message: Count): unknown {
    const obj: any = {};
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Count>, I>>(base?: I): Count {
    return Count.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Count>, I>>(object: I): Count {
    const message = createBaseCount();
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBasePaging(): Paging {
  return { limit: 0, offset: 0 };
}

export const Paging: MessageFns<Paging> = {
  encode(message: Paging, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(16).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Paging {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaging();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Paging {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: Paging): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Paging>, I>>(base?: I): Paging {
    return Paging.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Paging>, I>>(object: I): Paging {
    const message = createBasePaging();
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseSort(): Sort {
  return { field: "", direction: 0, nulls: 0 };
}

export const Sort: MessageFns<Sort> = {
  encode(message: Sort, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    if (message.nulls !== 0) {
      writer.uint32(24).int32(message.nulls);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sort {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nulls = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sort {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      direction: isSet(object.direction) ? sort_SortDirectionFromJSON(object.direction) : 0,
      nulls: isSet(object.nulls) ? sort_SortNullsFromJSON(object.nulls) : 0,
    };
  },

  toJSON(message: Sort): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.direction !== 0) {
      obj.direction = sort_SortDirectionToJSON(message.direction);
    }
    if (message.nulls !== 0) {
      obj.nulls = sort_SortNullsToJSON(message.nulls);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sort>, I>>(base?: I): Sort {
    return Sort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sort>, I>>(object: I): Sort {
    const message = createBaseSort();
    message.field = object.field ?? "";
    message.direction = object.direction ?? 0;
    message.nulls = object.nulls ?? 0;
    return message;
  },
};

function createBaseDeleteManyResponse(): DeleteManyResponse {
  return { deletedCount: 0 };
}

export const DeleteManyResponse: MessageFns<DeleteManyResponse> = {
  encode(message: DeleteManyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deletedCount !== 0) {
      writer.uint32(8).int32(message.deletedCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.deletedCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManyResponse {
    return { deletedCount: isSet(object.deletedCount) ? globalThis.Number(object.deletedCount) : 0 };
  },

  toJSON(message: DeleteManyResponse): unknown {
    const obj: any = {};
    if (message.deletedCount !== 0) {
      obj.deletedCount = Math.round(message.deletedCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteManyResponse>, I>>(base?: I): DeleteManyResponse {
    return DeleteManyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteManyResponse>, I>>(object: I): DeleteManyResponse {
    const message = createBaseDeleteManyResponse();
    message.deletedCount = object.deletedCount ?? 0;
    return message;
  },
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
