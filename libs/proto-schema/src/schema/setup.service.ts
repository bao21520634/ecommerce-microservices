// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.6
// source: setup.service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Setting, UpdateSettingInput } from "./setting";

export const protobufPackage = "setup";

export const SETUP_PACKAGE_NAME = "setup";

export interface SetupServiceClient {
  setting(request: Empty, metadata?: Metadata): Observable<Setting>;

  updateSetting(request: UpdateSettingInput, metadata?: Metadata): Observable<Setting>;
}

export interface SetupServiceController {
  setting(request: Empty, metadata?: Metadata): Promise<Setting> | Observable<Setting> | Setting;

  updateSetting(request: UpdateSettingInput, metadata?: Metadata): Promise<Setting> | Observable<Setting> | Setting;
}

export function SetupServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["setting", "updateSetting"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SetupService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SetupService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SETUP_SERVICE_NAME = "SetupService";
